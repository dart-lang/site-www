[
  {
    "id": "abi_specific_integer_invalid",
    "description": "_Classes extending 'AbiSpecificInteger' must have exactly one const constructor, no other members, and no type parameters._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abi_specific_integer_mapping_extra",
    "description": "_Classes extending 'AbiSpecificInteger' must have exactly one 'AbiSpecificIntegerMapping' annotation specifying the mapping from ABI to a 'NativeType' integer with a fixed size._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abi_specific_integer_mapping_missing",
    "description": "_Classes extending 'AbiSpecificInteger' must have exactly one 'AbiSpecificIntegerMapping' annotation specifying the mapping from ABI to a 'NativeType' integer with a fixed size._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abi_specific_integer_mapping_unsupported",
    "description": "_Invalid mapping to '{0}'; only mappings to 'Int8', 'Int16', 'Int32', 'Int64', 'Uint8', 'Uint16', 'UInt32', and 'Uint64' are supported._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abstract_class_member",
    "description": "_Members of classes can't be declared to be 'abstract'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abstract_external_field",
    "description": "_Fields can't be declared both 'abstract' and 'external'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abstract_field_initializer",
    "description": "_Abstract fields can't have initializers._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abstract_final_base_class",
    "description": "_An 'abstract' class can't be declared as both 'final' and 'base'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abstract_final_interface_class",
    "description": "_An 'abstract' class can't be declared as both 'final' and 'interface'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abstract_late_field",
    "description": "_Abstract fields cannot be late._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abstract_sealed_class",
    "description": "_A 'sealed' class can't be marked 'abstract' because it's already implicitly abstract._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abstract_static_field",
    "description": "_Static fields can't be declared 'abstract'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abstract_static_method",
    "description": "_Static methods can't be declared to be 'abstract'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "abstract_super_member_reference",
    "description": "_The {0} '{1}' is always abstract in the supertype._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "address_position",
    "description": "_The '.address' expression can only be used as argument to a leaf native external call._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "address_receiver",
    "description": "_The receiver of '.address' must be a concrete 'TypedData', a concrete 'TypedData' '[]', an 'Array', an 'Array' '[]', a Struct field, or a Union field._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "ambiguous_export",
    "description": "_The name '{0}' is defined in the libraries '{1}' and '{2}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "ambiguous_extension_member_access",
    "description": "_A member named '{0}' is defined in '{1}' and '{2}', and neither is more specific._\n\n_A member named '{0}' is defined in {1}, and none are more specific._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "ambiguous_import",
    "description": "_The name '{0}' is defined in the libraries {1}._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "ambiguous_set_or_map_literal_both",
    "description": "_The literal can't be either a map or a set because it contains at least one literal map entry or a spread operator spreading a 'Map', and at least one element which is neither of these._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "ambiguous_set_or_map_literal_either",
    "description": "_This literal must be either a map or a set, but the elements don't have enough information for type inference to work._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "analysis_option_deprecated",
    "description": "_The option '{0}' is no longer supported._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "annotation_on_pointer_field",
    "description": "_Fields in a struct class whose type is 'Pointer' shouldn't have any annotations._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "annotation_on_type_argument",
    "description": "_Type arguments can't have annotations because they aren't declarations._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "annotation_space_before_parenthesis",
    "description": "_Annotations can't have spaces or comments before the parenthesis._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "annotation_with_type_arguments",
    "description": "_An annotation can't use type arguments._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "annotation_with_type_arguments_uninstantiated",
    "description": "_An annotation with type arguments must be followed by an argument list._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "argument_must_be_a_constant",
    "description": "_Argument '{0}' must be a constant._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "argument_must_be_native",
    "description": "_Argument to 'Native.addressOf' must be annotated with @Native_",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "argument_type_not_assignable",
    "description": "_The argument type '{0}' can't be assigned to the parameter type '{1}'. {2}_",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "argument_type_not_assignable_to_error_handler",
    "description": "_The argument type '{0}' can't be assigned to the parameter type '{1} Function(Object)' or '{1} Function(Object, StackTrace)'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "assert_in_redirecting_constructor",
    "description": "_A redirecting constructor can't have an 'assert' initializer._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "asset_directory_does_not_exist",
    "description": "_The asset directory '{0}' doesn't exist._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "asset_does_not_exist",
    "description": "_The asset file '{0}' doesn't exist._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "asset_field_not_list",
    "description": "_The value of the 'assets' field is expected to be a list of relative file paths._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "asset_missing_path",
    "description": "_Asset map entry must contain a 'path' field._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "asset_not_string",
    "description": "_Assets are required to be file paths (strings)._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "asset_not_string_or_map",
    "description": "_An asset value is required to be a file path (string) or map._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "asset_path_not_string",
    "description": "_Asset paths are required to be file paths (strings)._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "assignment_of_do_not_store",
    "description": "_'{0}' is marked 'doNotStore' and shouldn't be assigned to a field or top-level variable._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "assignment_to_const",
    "description": "_Constant variables can't be assigned a value after initialization._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "assignment_to_final",
    "description": "_'{0}' can't be used as a setter because it's final._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "assignment_to_final_local",
    "description": "_The final variable '{0}' can only be set once._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "assignment_to_final_no_setter",
    "description": "_There isn't a setter named '{0}' in class '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "assignment_to_function",
    "description": "_Functions can't be assigned a value._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "assignment_to_method",
    "description": "_Methods can't be assigned a value._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "assignment_to_type",
    "description": "_Types can't be assigned a value._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "async_for_in_wrong_context",
    "description": "_The async for-in loop can only be used in an async function._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "async_keyword_used_as_identifier",
    "description": "_The keywords 'await' and 'yield' can't be used as identifiers in an asynchronous or generator function._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "augmentation_extends_clause_already_present",
    "description": "_The augmentation has an 'extends' clause, but an augmentation target already includes an 'extends' clause and it isn't allowed to be repeated or changed._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "augmentation_modifier_extra",
    "description": "_The augmentation has the '{0}' modifier that the declaration doesn't have._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "augmentation_modifier_missing",
    "description": "_The augmentation is missing the '{0}' modifier that the declaration has._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "augmentation_of_different_declaration_kind",
    "description": "_Can't augment a {0} with a {1}._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "augmentation_type_parameter_bound",
    "description": "_The augmentation type parameter must have the same bound as the corresponding type parameter of the declaration._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "augmentation_type_parameter_count",
    "description": "_The augmentation must have the same number of type parameters as the declaration._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "augmentation_type_parameter_name",
    "description": "_The augmentation type parameter must have the same name as the corresponding type parameter of the declaration._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "augmentation_without_declaration",
    "description": "_The declaration being augmented doesn't exist._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "augmented_expression_is_not_setter",
    "description": "_The augmented declaration is not a setter, it can't be used to write a value._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "augmented_expression_is_setter",
    "description": "_The augmented declaration is a setter, it can't be used to read a value._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "augmented_expression_not_operator",
    "description": "_The enclosing augmentation doesn't augment the operator '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "await_in_late_local_variable_initializer",
    "description": "_The 'await' expression can't be used in a 'late' local variable's initializer._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "await_in_wrong_context",
    "description": "_The await expression can only be used in an async function._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "await_of_incompatible_type",
    "description": "_The 'await' expression can't be used for an expression with an extension type that is not a subtype of 'Future'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "base_enum",
    "description": "_Enums can't be declared to be 'base'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "binary_operator_written_out",
    "description": "_Binary operator '{0}' is written as '{1}' instead of the written out word._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "body_might_complete_normally",
    "description": "_The body might complete normally, causing 'null' to be returned, but the return type, '{0}', is a potentially non-nullable type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "body_might_complete_normally_catch_error",
    "description": "_This 'onError' handler must return a value assignable to '{0}', but ends without returning a value._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "body_might_complete_normally_nullable",
    "description": "_This function has a nullable return type of '{0}', but ends without returning a value._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "break_label_on_switch_member",
    "description": "_A break label resolves to the 'case' or 'default' statement._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "break_outside_of_loop",
    "description": "_A break statement can't be used outside of a loop or switch statement._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "built_in_identifier_as_type",
    "description": "_The built-in identifier '{0}' can't be used as a type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "built_in_identifier_in_declaration",
    "description": "_The built-in identifier '{0}' can't be used as a prefix name._\n\n_The built-in identifier '{0}' can't be used as a type name._\n\n_The built-in identifier '{0}' can't be used as a type parameter name._\n\n_The built-in identifier '{0}' can't be used as a typedef name._\n\n_The built-in identifier '{0}' can't be used as an extension name._\n\n_The built-in identifier '{0}' can't be used as an extension type name._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "camera_permissions_incompatible",
    "description": "_Camera permissions make app incompatible for Chrome OS, consider adding optional features \"android.hardware.camera\" and \"android.hardware.camera.autofocus\"._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "case_block_not_terminated",
    "description": "_The last statement of the 'case' should be 'break', 'continue', 'rethrow', 'return', or 'throw'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "case_expression_type_implements_equals",
    "description": "_The switch case expression type '{0}' can't override the '==' operator._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "case_expression_type_is_not_switch_expression_subtype",
    "description": "_The switch case expression type '{0}' must be a subtype of the switch expression type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "cast_from_nullable_always_fails",
    "description": "_This cast will always throw an exception because the nullable local variable '{0}' is not assigned._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "cast_from_null_always_fails",
    "description": "_This cast always throws an exception because the expression always evaluates to 'null'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "cast_to_non_type",
    "description": "_The name '{0}' isn't a type, so it can't be used in an 'as' expression._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "catch_syntax",
    "description": "_'catch' must be followed by '(identifier)' or '(identifier, identifier)'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "catch_syntax_extra_parameters",
    "description": "_'catch' must be followed by '(identifier)' or '(identifier, identifier)'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "class_instantiation_access_to_member",
    "description": "_The class '{0}' doesn't have a constructor named '{1}'._\n\n_The instance member '{0}' can't be accessed on a class instantiation._\n\n_The static member '{0}' can't be accessed on a class instantiation._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "class_in_class",
    "description": "_Classes can't be declared inside other classes._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "class_used_as_mixin",
    "description": "_The class '{0}' can't be used as a mixin because it's neither a mixin class nor a mixin._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "collection_element_from_deferred_library",
    "description": "_Constant values from a deferred library can't be used as keys in a 'const' map literal._\n\n_Constant values from a deferred library can't be used as values in a 'const' constructor._\n\n_Constant values from a deferred library can't be used as values in a 'const' list literal._\n\n_Constant values from a deferred library can't be used as values in a 'const' map literal._\n\n_Constant values from a deferred library can't be used as values in a 'const' set literal._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "colon_in_place_of_in",
    "description": "_For-in loops use 'in' rather than a colon._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "compound_implements_finalizable",
    "description": "_The class '{0}' can't implement Finalizable._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "concrete_class_has_enum_superinterface",
    "description": "_Concrete classes can't have 'Enum' as a superinterface._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "concrete_class_with_abstract_member",
    "description": "_'{0}' must have a method body because '{1}' isn't abstract._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "conflicting_constructor_and_static_member",
    "description": "_'{0}' can't be used to name both a constructor and a static field in this class._\n\n_'{0}' can't be used to name both a constructor and a static getter in this class._\n\n_'{0}' can't be used to name both a constructor and a static method in this class._\n\n_'{0}' can't be used to name both a constructor and a static setter in this class._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "conflicting_field_and_method",
    "description": "_Class '{0}' can't define field '{1}' and have method '{2}.{1}' with the same name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "conflicting_generic_interfaces",
    "description": "_The {0} '{1}' can't implement both '{2}' and '{3}' because the type arguments are different._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "conflicting_inherited_method_and_setter",
    "description": "_The {0} '{1}' can't inherit both a method and a setter named '{2}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "conflicting_method_and_field",
    "description": "_Class '{0}' can't define method '{1}' and have field '{2}.{1}' with the same name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "conflicting_modifiers",
    "description": "_Members can't be declared to be both '{0}' and '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "conflicting_static_and_instance",
    "description": "_Class '{0}' can't define static member '{1}' and have instance member '{2}.{1}' with the same name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "conflicting_type_variable_and_container",
    "description": "_'{0}' can't be used to name both a type parameter and the class in which the type parameter is defined._\n\n_'{0}' can't be used to name both a type parameter and the enum in which the type parameter is defined._\n\n_'{0}' can't be used to name both a type parameter and the extension in which the type parameter is defined._\n\n_'{0}' can't be used to name both a type parameter and the extension type in which the type parameter is defined._\n\n_'{0}' can't be used to name both a type parameter and the mixin in which the type parameter is defined._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "conflicting_type_variable_and_member",
    "description": "_'{0}' can't be used to name both a type parameter and a member in this class._\n\n_'{0}' can't be used to name both a type parameter and a member in this enum._\n\n_'{0}' can't be used to name both a type parameter and a member in this extension type._\n\n_'{0}' can't be used to name both a type parameter and a member in this extension._\n\n_'{0}' can't be used to name both a type parameter and a member in this mixin._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "constant_pattern_never_matches_value_type",
    "description": "_The matched value type '{0}' can never be equal to this constant of type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "constant_pattern_with_non_constant_expression",
    "description": "_The expression of a constant pattern must be a valid constant._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "constructor_with_return_type",
    "description": "_Constructors can't have a return type._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "constructor_with_type_arguments",
    "description": "_A constructor invocation can't have type arguments after the constructor name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_and_final",
    "description": "_Members can't be declared to be both 'const' and 'final'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_class",
    "description": "_Classes can't be declared to be 'const'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_constructor_field_type_mismatch",
    "description": "_In a const constructor, a value of type '{0}' can't be assigned to the field '{1}', which has type '{2}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_constructor_param_type_mismatch",
    "description": "_A value of type '{0}' can't be assigned to a parameter of type '{1}' in a const constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_constructor_throws_exception",
    "description": "_Const constructors can't throw exceptions._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_constructor_with_body",
    "description": "_Const constructors can't have a body._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_constructor_with_field_initialized_by_non_const",
    "description": "_Can't define the 'const' constructor because the field '{0}' is initialized with a non-constant value._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_constructor_with_mixin_with_field",
    "description": "_This constructor can't be declared 'const' because a mixin adds the instance field: {0}._\n\n_This constructor can't be declared 'const' because the mixins add the instance fields: {0}._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_constructor_with_non_const_super",
    "description": "_A constant constructor can't call a non-constant super constructor of '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_constructor_with_non_final_field",
    "description": "_Can't define a const constructor for a class with non-final fields._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_deferred_class",
    "description": "_Deferred classes can't be created with 'const'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_assertion_failure",
    "description": "_The assertion in this constant expression failed._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_assertion_failure_with_message",
    "description": "_An assertion failed with message '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_extension_method",
    "description": "_Extension methods can't be used in constant expressions._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_extension_type_method",
    "description": "_Extension type methods can't be used in constant expressions._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_for_element",
    "description": "_Constant expressions don't support 'for' elements._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_method_invocation",
    "description": "_Methods can't be invoked in constant expressions._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_primitive_equality",
    "description": "_In constant expressions, operands of the equality operator must have primitive equality._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_property_access",
    "description": "_The property '{0}' can't be accessed on the type '{1}' in a constant expression._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_throws_exception",
    "description": "_Evaluation of this constant expression throws an exception._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_throws_idbze",
    "description": "_Evaluation of this constant expression throws an IntegerDivisionByZeroException._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_type_bool",
    "description": "_In constant expressions, operands of this operator must be of type 'bool'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_type_bool_int",
    "description": "_In constant expressions, operands of this operator must be of type 'bool' or 'int'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_type_bool_num_string",
    "description": "_In constant expressions, operands of this operator must be of type 'bool', 'num', 'String' or 'null'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_type_int",
    "description": "_In constant expressions, operands of this operator must be of type 'int'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_type_num",
    "description": "_In constant expressions, operands of this operator must be of type 'num'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_type_num_string",
    "description": "_In constant expressions, operands of this operator must be of type 'num' or 'String'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_type_string",
    "description": "_In constant expressions, operands of this operator must be of type 'String'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_eval_type_type",
    "description": "_In constant expressions, operands of this operator must be of type 'Type'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_factory",
    "description": "_Only redirecting factory constructors can be declared to be 'const'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_initialized_with_non_constant_value",
    "description": "_Const variables must be initialized with a constant value._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_initialized_with_non_constant_value_from_deferred_library",
    "description": "_Constant values from a deferred library can't be used to initialize a 'const' variable._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_instance_field",
    "description": "_Only static fields can be declared as const._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_map_key_not_primitive_equality",
    "description": "_The type of a key in a constant map can't override the '==' operator, or 'hashCode', but the class '{0}' does._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_method",
    "description": "_Getters, setters and methods can't be declared to be 'const'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_not_initialized",
    "description": "_The constant '{0}' must be initialized._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_set_element_not_primitive_equality",
    "description": "_An element in a constant set can't override the '==' operator, or 'hashCode', but the type '{0}' does._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": [
      "const_set_element_type_implements_equals"
    ]
  },
  {
    "id": "const_spread_expected_list_or_set",
    "description": "_A list or a set is expected in this spread._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_spread_expected_map",
    "description": "_A map is expected in this spread._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_type_parameter",
    "description": "_Type parameters can't be used in a constant expression._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_with_non_const",
    "description": "_The constructor being called isn't a const constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_with_non_constant_argument",
    "description": "_Arguments of a constant creation must be constant expressions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_with_type_parameters",
    "description": "_A constant constructor tearoff can't use a type parameter as a type argument._\n\n_A constant creation can't use a type parameter as a type argument._\n\n_A constant function tearoff can't use a type parameter as a type argument._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_with_undefined_constructor",
    "description": "_The class '{0}' doesn't have a constant constructor '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "const_with_undefined_constructor_default",
    "description": "_The class '{0}' doesn't have an unnamed constant constructor._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "continue_label_invalid",
    "description": "_The label used in a 'continue' statement must be defined on either a loop or a switch member._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": [
      "continue_label_on_switch"
    ]
  },
  {
    "id": "continue_outside_of_loop",
    "description": "_A continue statement can't be used outside of a loop or switch statement._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "continue_without_label_in_case",
    "description": "_A continue statement in a switch statement must have a label as a target._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "could_not_infer",
    "description": "_Couldn't infer type parameter '{0}'.{1}_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "covariant_and_static",
    "description": "_Members can't be declared to be both 'covariant' and 'static'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "covariant_constructor",
    "description": "_A constructor can't be declared to be 'covariant'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "covariant_member",
    "description": "_Getters, setters and methods can't be declared to be 'covariant'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "creation_of_struct_or_union",
    "description": "_Subclasses of 'Struct' and 'Union' are backed by native memory, and can't be instantiated by a generative constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "creation_with_non_type",
    "description": "_The name '{0}' isn't a class._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "dead_code",
    "description": "_Dead code._\n\n_Dead code: The assigned-to wildcard variable is marked late and can never be referenced so this initializer will never be evaluated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "dead_code_catch_following_catch",
    "description": "_Dead code: Catch clauses after a 'catch (e)' or an 'on Object catch (e)' are never reached._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "dead_code_on_catch_subtype",
    "description": "_Dead code: This on-catch block won't be executed because '{0}' is a subtype of '{1}' and hence will have been caught already._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "dead_null_aware_expression",
    "description": "_The left operand can't be null, so the right operand is never executed._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "default_in_switch_expression",
    "description": "_A switch expression may not use the `default` keyword._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "default_list_constructor",
    "description": "_The default 'List' constructor isn't available when null safety is enabled._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "default_value_in_function_type",
    "description": "_Parameters in a function type can't have default values._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "default_value_in_redirecting_factory_constructor",
    "description": "_Default values aren't allowed in factory constructors that redirect to another constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "default_value_on_required_parameter",
    "description": "_Required named parameters can't have a default value._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deferred_after_prefix",
    "description": "_The deferred keyword should come immediately before the prefix ('as' clause)._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deferred_import_of_extension",
    "description": "_Imports of deferred libraries must hide all extensions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "definitely_unassigned_late_local_variable",
    "description": "_The late local variable '{0}' is definitely unassigned at this point._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "dependencies_field_not_map",
    "description": "_The value of the '{0}' field is expected to be a map._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_colon_for_default_value",
    "description": "_Using a colon as the separator before a default value is deprecated and will not be supported in language version 3.0 and later._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_export_use",
    "description": "_The ability to import '{0}' indirectly is deprecated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_extend",
    "description": "_Extending '{0}' is deprecated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_field",
    "description": "_The '{0}' field is no longer used and can be removed._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_implement",
    "description": "_Implementing '{0}' is deprecated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_instantiate",
    "description": "_Instantiating '{0}' is deprecated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_lint",
    "description": "_'{0}' is a deprecated lint rule and should not be used._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_lint_with_replacement",
    "description": "_'{0}' is deprecated and should be replaced by '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_member_use",
    "description": "_'{0}' is deprecated and shouldn't be used._\n\n_'{0}' is deprecated and shouldn't be used. {1}_",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_member_use_from_same_package",
    "description": "_'{0}' is deprecated and shouldn't be used._\n\n_'{0}' is deprecated and shouldn't be used. {1}_",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_mixin",
    "description": "_Mixing in '{0}' is deprecated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_new_in_comment_reference",
    "description": "_Using the 'new' keyword in a comment reference is deprecated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_subclass",
    "description": "_Subclassing '{0}' is deprecated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "deprecated_subtype_of_function",
    "description": "_Extending 'Function' is deprecated._\n\n_Implementing 'Function' has no effect._\n\n_Mixing in 'Function' is deprecated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "directive_after_declaration",
    "description": "_Directives must appear before any declarations._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "disallowed_type_instantiation_expression",
    "description": "_Only a generic type, generic function, generic instance method, or generic constructor can have type arguments._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "division_optimization",
    "description": "_The operator x ~/ y is more efficient than (x / y).toInt()._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "doc_directive_argument_wrong_format",
    "description": "_The '{0}' argument must be formatted as {1}._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "doc_directive_has_extra_arguments",
    "description": "_The '{0}' directive has '{1}' arguments, but only '{2}' are expected._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "doc_directive_has_unexpected_named_argument",
    "description": "_The '{0}' directive has an unexpected named argument, '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "doc_directive_missing_argument",
    "description": "_The '{0}' directive is missing a '{1}' and a '{2}' argument._\n\n_The '{0}' directive is missing a '{1}' argument._\n\n_The '{0}' directive is missing a '{1}', a '{2}', and a '{3}' argument._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "doc_directive_missing_closing_brace",
    "description": "_Doc directive is missing a closing curly brace ('}')._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "doc_directive_missing_closing_tag",
    "description": "_Doc directive is missing a closing tag._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "doc_directive_missing_opening_tag",
    "description": "_Doc directive is missing an opening tag._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "doc_directive_unknown",
    "description": "_Doc directive '{0}' is unknown._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "doc_import_cannot_be_deferred",
    "description": "_Doc imports can't be deferred._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "doc_import_cannot_have_combinators",
    "description": "_Doc imports can't have show or hide combinators._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "doc_import_cannot_have_configurations",
    "description": "_Doc imports can't have configurations._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "doc_import_cannot_have_prefix",
    "description": "_Doc imports can't have prefixes._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "dot_shorthand_missing_context",
    "description": "_A dot shorthand can't be used where there is no context type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "dot_shorthand_undefined_member",
    "description": "_The static getter '{0}' isn't defined for the context type '{1}'._\n\n_The static method or constructor '{0}' isn't defined for the context type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicated_modifier",
    "description": "_The modifier '{0}' was already specified._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_constructor",
    "description": "_The constructor with name '{0}' is already defined._\n\n_The unnamed constructor is already defined._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_deferred",
    "description": "_An import directive can only have one 'deferred' keyword._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_definition",
    "description": "_The name '{0}' is already defined._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_export",
    "description": "_Duplicate export._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_field_formal_parameter",
    "description": "_The field '{0}' can't be initialized by multiple parameters in the same constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_field_name",
    "description": "_The field name '{0}' is already used in this record._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_hidden_name",
    "description": "_Duplicate hidden name._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_ignore",
    "description": "_The diagnostic '{0}' doesn't need to be ignored here because it's already being ignored._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_import",
    "description": "_Duplicate import._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_label_in_switch_statement",
    "description": "_The label '{0}' was already used in this switch statement._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_named_argument",
    "description": "_The argument for the named parameter '{0}' was already specified._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_part",
    "description": "_The library already contains a part with the URI '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_pattern_assignment_variable",
    "description": "_The variable '{0}' is already assigned in this pattern._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_pattern_field",
    "description": "_The field '{0}' is already matched in this pattern._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_prefix",
    "description": "_An import directive can only have one prefix ('as' clause)._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_rest_element_in_pattern",
    "description": "_At most one rest element is allowed in a list or map pattern._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_rule",
    "description": "_The rule {0} is already specified and doesn't need to be specified again._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_shown_name",
    "description": "_Duplicate shown name._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "duplicate_variable_pattern",
    "description": "_The variable '{0}' is already defined in this pattern._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "empty_enum_body",
    "description": "_An enum must declare at least one constant name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "empty_map_pattern",
    "description": "_A map pattern must have at least one entry._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "empty_record_literal_with_comma",
    "description": "_A record literal without fields can't have a trailing comma._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "empty_record_type_named_fields_list",
    "description": "_The list of named fields in a record type can't be empty._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "empty_record_type_with_comma",
    "description": "_A record type without fields can't have a trailing comma._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "empty_struct",
    "description": "_The class '{0}' can't be empty because it's a subclass of '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "enum_constant_invokes_factory_constructor",
    "description": "_An enum value can't invoke a factory constructor._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "enum_constant_same_name_as_enclosing",
    "description": "_The name of the enum value can't be the same as the enum's name._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "enum_constant_with_non_const_constructor",
    "description": "_The invoked constructor isn't a 'const' constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "enum_instantiated_to_bounds_is_not_well_bounded",
    "description": "_The result of instantiating the enum to bounds is not well-bounded._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "enum_in_class",
    "description": "_Enums can't be declared inside classes._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "enum_mixin_with_instance_variable",
    "description": "_Mixins applied to enums can't have instance variables._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "enum_without_constants",
    "description": "_The enum must have at least one enum constant._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "enum_with_abstract_member",
    "description": "_'{0}' must have a method body because '{1}' is an enum._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "enum_with_name_values",
    "description": "_The name 'values' is not a valid name for an enum._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "equality_cannot_be_equality_operand",
    "description": "_A comparison expression can't be an operand of another comparison expression._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "equal_elements_in_const_set",
    "description": "_Two elements in a constant set literal can't be equal._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "equal_elements_in_set",
    "description": "_Two elements in a set literal shouldn't be equal._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "equal_keys_in_const_map",
    "description": "_Two keys in a constant map literal can't be equal._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "equal_keys_in_map",
    "description": "_Two keys in a map literal shouldn't be equal._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "equal_keys_in_map_pattern",
    "description": "_Two keys in a map pattern can't be equal._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_body",
    "description": "_A catch clause must have a body, even if it is empty._\n\n_A class declaration must have a body, even if it is empty._\n\n_A finally clause must have a body, even if it is empty._\n\n_A mixin declaration must have a body, even if it is empty._\n\n_A switch expression must have a body, even if it is empty._\n\n_A switch statement must have a body, even if it is empty._\n\n_A try statement must have a body, even if it is empty._\n\n_An extension declaration must have a body, even if it is empty._\n\n_An extension type declaration must have a body, even if it is empty._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_case_or_default",
    "description": "_Expected 'case' or 'default'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_class_member",
    "description": "_Expected a class member._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_else_or_comma",
    "description": "_Expected 'else' or comma._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_executable",
    "description": "_Expected a method, getter, setter or operator declaration._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_identifier_but_got_keyword",
    "description": "_'{0}' can't be used as an identifier because it's a keyword._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_instead",
    "description": "_Expected '{0}' instead of this._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_list_or_map_literal",
    "description": "_Expected a list or map literal._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_named_type",
    "description": "_Expected a class name._\n\n_Expected a mixin name._\n\n_Expected the name of a class or mixin._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_one_list_pattern_type_arguments",
    "description": "_List patterns require one type argument or none, but {0} found._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_one_list_type_arguments",
    "description": "_List literals require one type argument or none, but {0} found._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_one_set_type_arguments",
    "description": "_Set literals require one type argument or none, but {0} were found._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_representation_field",
    "description": "_Expected a representation field._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_representation_type",
    "description": "_Expected a representation type._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_string_literal",
    "description": "_Expected a string literal._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_token",
    "description": "_Expected to find '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_two_map_pattern_type_arguments",
    "description": "_Map patterns require two type arguments or none, but {0} found._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_two_map_type_arguments",
    "description": "_Map literals require two type arguments or none, but {0} found._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expected_type_name",
    "description": "_Expected a type name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "experiment_not_enabled",
    "description": "_This requires the '{0}' language feature to be enabled._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "experiment_not_enabled_off_by_default",
    "description": "_This requires the experimental '{0}' language feature to be enabled._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "export_directive_after_part_directive",
    "description": "_Export directives must precede part directives._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "export_internal_library",
    "description": "_The library '{0}' is internal and can't be exported._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "export_legacy_symbol",
    "description": "_The symbol '{0}' is defined in a legacy library, and can't be re-exported from a library with null safety enabled._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "export_of_non_library",
    "description": "_The exported library '{0}' can't have a part-of directive._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "expression_in_map",
    "description": "_Expressions can't be used in a map literal._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extends_non_class",
    "description": "_Classes can only extend other classes._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_as_expression",
    "description": "_Extension '{0}' can't be used as an expression._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_augmentation_has_on_clause",
    "description": "_Extension augmentations can't have 'on' clauses._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_conflicting_static_and_instance",
    "description": "_An extension can't define static member '{0}' and an instance member with the same name._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_declares_abstract_member",
    "description": "_Extensions can't declare abstract members._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_declares_constructor",
    "description": "_Extensions can't declare constructors._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_declares_instance_field",
    "description": "_Extensions can't declare instance fields._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_declares_member_of_object",
    "description": "_Extensions can't declare members with the same name as a member declared by 'Object'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_override_access_to_static_member",
    "description": "_An extension override can't be used to access a static member from an extension._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_override_argument_not_assignable",
    "description": "_The type of the argument to the extension override '{0}' isn't assignable to the extended type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_override_without_access",
    "description": "_An extension override can only be used to access instance members._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_override_with_cascade",
    "description": "_Extension overrides have no value so they can't be used as the receiver of a cascade expression._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_constructor_with_super_formal_parameter",
    "description": "_Extension type constructors can't declare super formal parameters._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_constructor_with_super_invocation",
    "description": "_Extension type constructors can't include super initializers._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_declares_instance_field",
    "description": "_Extension types can't declare instance fields._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_declares_member_of_object",
    "description": "_Extension types can't declare members with the same name as a member declared by 'Object'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_extends",
    "description": "_An extension type declaration can't have an 'extends' clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_implements_disallowed_type",
    "description": "_Extension types can't implement '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_implements_itself",
    "description": "_The extension type can't implement itself._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_implements_not_supertype",
    "description": "_'{0}' is not a supertype of '{1}', the representation type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_implements_representation_not_supertype",
    "description": "_'{0}', the representation type of '{1}', is not a supertype of '{2}', the representation type of '{3}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_inherited_member_conflict",
    "description": "_The extension type '{0}' has more than one distinct member named '{1}' from implemented types._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_representation_depends_on_itself",
    "description": "_The extension type representation can't depend on itself._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_representation_type_bottom",
    "description": "_The representation type can't be a bottom type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_with",
    "description": "_An extension type declaration can't have a 'with' clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extension_type_with_abstract_member",
    "description": "_'{0}' must have a method body because '{1}' is an extension type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_class",
    "description": "_Classes can't be declared to be 'external'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_constructor_with_field_initializers",
    "description": "_An external constructor can't initialize fields._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_constructor_with_initializer",
    "description": "_An external constructor can't have any initializers._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_enum",
    "description": "_Enums can't be declared to be 'external'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_factory_redirection",
    "description": "_A redirecting factory can't be external._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_factory_with_body",
    "description": "_External factories can't have a body._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_getter_with_body",
    "description": "_External getters can't have a body._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_late_field",
    "description": "_External fields cannot be late._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_method_with_body",
    "description": "_An external or native method can't have a body._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_operator_with_body",
    "description": "_External operators can't have a body._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_setter_with_body",
    "description": "_External setters can't have a body._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_typedef",
    "description": "_Typedefs can't be declared to be 'external'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "external_with_initializer",
    "description": "_External fields can't have initializers._\n\n_External variables can't have initializers._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extraneous_modifier",
    "description": "_Can't have modifier '{0}' here._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extraneous_modifier_in_extension_type",
    "description": "_Can't have modifier '{0}' in an extension type._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extraneous_modifier_in_primary_constructor",
    "description": "_Can't have modifier '{0}' in a primary constructor._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extra_annotation_on_struct_field",
    "description": "_Fields in a struct class must have exactly one annotation indicating the native type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extra_positional_arguments",
    "description": "_Too many positional arguments: {0} expected, but {1} found._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extra_positional_arguments_could_be_named",
    "description": "_Too many positional arguments: {0} expected, but {1} found._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "extra_size_annotation_carray",
    "description": "_'Array's must have exactly one 'Array' annotation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "factory_top_level_declaration",
    "description": "_Top-level declarations can't be declared to be 'factory'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "factory_without_body",
    "description": "_A non-redirecting 'factory' constructor must have a body._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "factory_with_initializers",
    "description": "_A 'factory' constructor can't have initializers._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "ffi_native_invalid_duplicate_default_asset",
    "description": "_There may be at most one @DefaultAsset annotation on a library._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "ffi_native_invalid_multiple_annotations",
    "description": "_Native functions and fields must have exactly one `@Native` annotation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "ffi_native_must_be_external",
    "description": "_Native functions must be declared external._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "ffi_native_only_classes_extending_nativefieldwrapperclass1_can_be_pointer",
    "description": "_Only classes extending NativeFieldWrapperClass1 can be passed as Pointer._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "ffi_native_unexpected_number_of_parameters",
    "description": "_Unexpected number of Native annotation parameters. Expected {0} but has {1}._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "ffi_native_unexpected_number_of_parameters_with_receiver",
    "description": "_Unexpected number of Native annotation parameters. Expected {0} but has {1}. Native instance method annotation must have receiver as first argument._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "field_initialized_by_multiple_initializers",
    "description": "_The field '{0}' can't be initialized twice in the same constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "field_initialized_in_initializer_and_declaration",
    "description": "_Fields can't be initialized in the constructor if they are final and were already initialized at their declaration._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "field_initialized_in_parameter_and_initializer",
    "description": "_Fields can't be initialized in both the parameter list and the initializers._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "field_initialized_outside_declaring_class",
    "description": "_A field can only be initialized in its declaring class_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "field_initializer_factory_constructor",
    "description": "_Initializing formal parameters can't be used in factory constructors._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "field_initializer_in_struct",
    "description": "_Constructors in subclasses of 'Struct' and 'Union' can't have field initializers._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "field_initializer_not_assignable",
    "description": "_The initializer type '{0}' can't be assigned to the field type '{1}' in a const constructor._\n\n_The initializer type '{0}' can't be assigned to the field type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "field_initializer_outside_constructor",
    "description": "_Field formal parameters can only be used in a constructor._\n\n_Initializing formal parameters can only be used in constructors._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "field_initializer_redirecting_constructor",
    "description": "_The redirecting constructor can't have a field initializer._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "field_initializing_formal_not_assignable",
    "description": "_The parameter type '{0}' is incompatible with the field type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "field_in_struct_with_initializer",
    "description": "_Fields in subclasses of 'Struct' and 'Union' can't have initializers._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "field_must_be_external_in_struct",
    "description": "_Fields of 'Struct' and 'Union' subclasses must be marked external._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "final_and_covariant",
    "description": "_Members can't be declared to be both 'final' and 'covariant'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "final_and_covariant_late_with_initializer",
    "description": "_Members marked 'late' with an initializer can't be declared to be both 'final' and 'covariant'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "final_and_var",
    "description": "_Members can't be declared to be both 'final' and 'var'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "final_constructor",
    "description": "_A constructor can't be declared to be 'final'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "final_enum",
    "description": "_Enums can't be declared to be 'final'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "final_initialized_in_declaration_and_constructor",
    "description": "_'{0}' is final and was given a value when it was declared, so it can't be set to a new value._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "final_method",
    "description": "_Getters, setters and methods can't be declared to be 'final'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "final_mixin",
    "description": "_A mixin can't be declared 'final'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "final_mixin_class",
    "description": "_A mixin class can't be declared 'final'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "final_not_initialized",
    "description": "_The final variable '{0}' must be initialized._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "final_not_initialized_constructor",
    "description": "_All final variables must be initialized, but '{0}' and '{1}' aren't._\n\n_All final variables must be initialized, but '{0}' isn't._\n\n_All final variables must be initialized, but '{0}', '{1}', and {2} others aren't._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "fixme",
    "description": "_{0}_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "flutter_field_not_map",
    "description": "_The value of the 'flutter' field is expected to be a map._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "for_in_of_invalid_element_type",
    "description": "_The type '{0}' used in the 'for' loop must implement '{1}' with a type argument that can be assigned to '{2}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "for_in_of_invalid_type",
    "description": "_The type '{0}' used in the 'for' loop must implement '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "for_in_with_const_variable",
    "description": "_A for-in loop variable can't be a 'const'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "function_typed_parameter_var",
    "description": "_Function-typed parameters can't specify 'const', 'final' or 'var' in place of a return type._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "generic_function_type_cannot_be_bound",
    "description": "_Generic function types can't be used as type parameter bounds._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "generic_function_type_cannot_be_type_argument",
    "description": "_A generic function type can't be a type argument._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "generic_method_type_instantiation_on_dynamic",
    "description": "_A method tear-off on a receiver whose type is 'dynamic' can't have type arguments._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "generic_struct_subclass",
    "description": "_The class '{0}' can't extend 'Struct' or 'Union' because '{0}' is generic._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "getter_constructor",
    "description": "_Constructors can't be a getter._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "getter_in_function",
    "description": "_Getters can't be defined within methods or functions._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "getter_not_assignable_setter_types",
    "description": "_The return type of getter '{0}' is '{1}' which isn't assignable to the type '{2}' of its setter '{3}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "getter_not_subtype_setter_types",
    "description": "_The return type of getter '{0}' is '{1}' which isn't a subtype of the type '{2}' of its setter '{3}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "getter_with_parameters",
    "description": "_Getters must be declared without a parameter list._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "hack",
    "description": "_{0}_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "if_element_condition_from_deferred_library",
    "description": "_Constant values from a deferred library can't be used as values in an if condition inside a const collection literal._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "illegal_assignment_to_non_assignable",
    "description": "_Illegal assignment to non-assignable expression._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "illegal_async_generator_return_type",
    "description": "_Functions marked 'async*' must have a return type that is a supertype of 'Stream<T>' for some type 'T'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "illegal_async_return_type",
    "description": "_Functions marked 'async' must have a return type which is a supertype of 'Future'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "illegal_character",
    "description": "_Illegal character '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "illegal_concrete_enum_member",
    "description": "_A concrete instance member named '{0}' can't be declared in a class that implements 'Enum'._\n\n_A concrete instance member named '{0}' can't be inherited from '{1}' in a class that implements 'Enum'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "illegal_enum_values",
    "description": "_An instance member named 'values' can't be declared in a class that implements 'Enum'._\n\n_An instance member named 'values' can't be inherited from '{0}' in a class that implements 'Enum'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "illegal_language_version_override",
    "description": "_The language version must be {0}._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "illegal_pattern_assignment_variable_name",
    "description": "_A variable assigned by a pattern assignment can't be named '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "illegal_pattern_identifier_name",
    "description": "_A pattern can't refer to an identifier named '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "illegal_pattern_variable_name",
    "description": "_The variable declared by a variable pattern can't be named '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "illegal_sync_generator_return_type",
    "description": "_Functions marked 'sync*' must have a return type that is a supertype of 'Iterable<T>' for some type 'T'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "implements_before_extends",
    "description": "_The extends clause must be before the implements clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "implements_before_on",
    "description": "_The on clause must be before the implements clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "implements_before_with",
    "description": "_The with clause must be before the implements clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "implements_non_class",
    "description": "_Classes and mixins can only implement other classes and mixins._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "implements_repeated",
    "description": "_'{0}' can only be implemented once._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "implements_super_class",
    "description": "_'{0}' can't be used in both the 'extends' and 'implements' clauses._\n\n_'{0}' can't be used in both the 'extends' and 'with' clauses._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "implicit_super_initializer_missing_arguments",
    "description": "_The implicitly invoked unnamed constructor from '{0}' has required parameters._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "implicit_this_reference_in_initializer",
    "description": "_The instance member '{0}' can't be accessed in an initializer._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "import_deferred_library_with_load_function",
    "description": "_The imported library defines a top-level function named 'loadLibrary' that is hidden by deferring this library._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "import_directive_after_part_directive",
    "description": "_Import directives must precede part directives._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "import_internal_library",
    "description": "_The library '{0}' is internal and can't be imported._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "import_of_legacy_library_into_null_safe",
    "description": "_The library '{0}' is legacy, and shouldn't be imported into a null safe library._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "import_of_non_library",
    "description": "_The imported library '{0}' can't have a part-of directive._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "included_file_parse_error",
    "description": "_{0} in {1}({2}..{3})_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "included_file_warning",
    "description": "_Warning in the included options file {0}({1}..{2}): {3}_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "include_file_not_found",
    "description": "_The include file '{0}' in '{1}' can't be found when analyzing '{2}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "incompatible_lint",
    "description": "_The rule '{0}' is incompatible with '{1}', which is included from {2} file{3}._\n\n_The rule '{0}' is incompatible with {1}._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "inconsistent_case_expression_types",
    "description": "_Case expressions must have the same types, '{0}' isn't a '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "inconsistent_inheritance",
    "description": "_Superinterfaces don't have a valid override for '{0}': {1}._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "inconsistent_inheritance_getter_and_method",
    "description": "_'{0}' is inherited as a getter (from '{1}') and also a method (from '{2}')._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "inconsistent_language_version_override",
    "description": "_Parts must have exactly the same language version override as the library._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "inconsistent_pattern_variable_logical_or",
    "description": "_The variable '{0}' has a different type and/or finality in this branch of the logical-or pattern._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "inference_failure_on_collection_literal",
    "description": "_The type argument(s) of '{0}' can't be inferred._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "inference_failure_on_function_invocation",
    "description": "_The type argument(s) of the function '{0}' can't be inferred._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "inference_failure_on_function_return_type",
    "description": "_The return type of '{0}' can't be inferred._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "inference_failure_on_generic_invocation",
    "description": "_The type argument(s) of the generic function type '{0}' can't be inferred._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "inference_failure_on_instance_creation",
    "description": "_The type argument(s) of the constructor '{0}' can't be inferred._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "inference_failure_on_uninitialized_variable",
    "description": "_The type of {0} can't be inferred without either a type or initializer._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "inference_failure_on_untyped_parameter",
    "description": "_The type of {0} can't be inferred; a type must be explicitly provided._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "initialized_variable_in_for_each",
    "description": "_The loop variable in a for-each loop can't be initialized._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "initializer_for_non_existent_field",
    "description": "_'{0}' isn't a field in the enclosing class._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "initializer_for_static_field",
    "description": "_'{0}' is a static field in the enclosing class. Fields initialized in a constructor can't be static._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "initializing_formal_for_non_existent_field",
    "description": "_'{0}' isn't a field in the enclosing class._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "instance_access_to_static_member",
    "description": "_The static {0} '{1}' can't be accessed through an instance._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "instance_member_access_from_factory",
    "description": "_Instance members can't be accessed from a factory constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "instance_member_access_from_static",
    "description": "_Instance members can't be accessed from a static method._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "instantiate_abstract_class",
    "description": "_Abstract classes can't be instantiated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "instantiate_enum",
    "description": "_Enums can't be instantiated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "instantiate_type_alias_expands_to_type_parameter",
    "description": "_Type aliases that expand to a type parameter can't be instantiated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "integer_literal_imprecise_as_double",
    "description": "_The integer literal is being used as a double, but can't be represented as a 64-bit double without overflow or loss of precision: '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "integer_literal_out_of_range",
    "description": "_The integer literal {0} can't be represented in 64 bits._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "interface_enum",
    "description": "_Enums can't be declared to be 'interface'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "interface_mixin",
    "description": "_A mixin can't be declared 'interface'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "interface_mixin_class",
    "description": "_A mixin class can't be declared 'interface'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_annotation",
    "description": "_Annotation must be either a const variable reference or const constructor invocation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_annotation_constant_value_from_deferred_library",
    "description": "_Constant values from a deferred library can't be used in annotations._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_annotation_from_deferred_library",
    "description": "_Constant values from a deferred library can't be used as annotations._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_annotation_target",
    "description": "_The annotation '{0}' can only be used on {1}._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_assignment",
    "description": "_A value of type '{0}' can't be assigned to a variable of type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_await_in_for",
    "description": "_The keyword 'await' isn't allowed for a normal 'for' statement._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_await_not_required_annotation",
    "description": "_The annotation 'awaitNotRequired' can only be applied to a Future-returning function, or a Future-typed field._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_cast_function",
    "description": "_The function '{0}' has type '{1}' that isn't of expected type '{2}'. This means its parameter or return type doesn't match what is expected._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_cast_function_expr",
    "description": "_The function expression type '{0}' isn't of type '{1}'. This means its parameter or return type doesn't match what is expected. Consider changing parameter type(s) or the returned type(s)._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_cast_literal",
    "description": "_The literal '{0}' with type '{1}' isn't of expected type '{2}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_cast_literal_list",
    "description": "_The list literal type '{0}' isn't of expected type '{1}'. The list's type can be changed with an explicit generic type argument or by changing the element types._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_cast_literal_map",
    "description": "_The map literal type '{0}' isn't of expected type '{1}'. The map's type can be changed with an explicit generic type arguments or by changing the key and value types._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_cast_literal_set",
    "description": "_The set literal type '{0}' isn't of expected type '{1}'. The set's type can be changed with an explicit generic type argument or by changing the element types._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_cast_method",
    "description": "_The method tear-off '{0}' has type '{1}' that isn't of expected type '{2}'. This means its parameter or return type doesn't match what is expected._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_cast_new_expr",
    "description": "_The constructor returns type '{0}' that isn't of expected type '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_code_point",
    "description": "_The escape sequence '{0}' isn't a valid code point._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_comment_reference",
    "description": "_Comment references should contain a possibly prefixed identifier and can start with 'new', but shouldn't contain anything else._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_constant",
    "description": "_Invalid constant value._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_constant_const_prefix",
    "description": "_The expression can't be prefixed by 'const' to form a constant pattern._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_constant_pattern_binary",
    "description": "_The binary operator {0} is not supported as a constant pattern._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_constant_pattern_duplicate_const",
    "description": "_Duplicate 'const' keyword in constant expression._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_constant_pattern_empty_record_literal",
    "description": "_The empty record literal is not supported as a constant pattern._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_constant_pattern_generic",
    "description": "_This expression is not supported as a constant pattern._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_constant_pattern_negation",
    "description": "_Only negation of a numeric literal is supported as a constant pattern._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_constant_pattern_unary",
    "description": "_The unary operator {0} is not supported as a constant pattern._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_constructor_name",
    "description": "_The name of a constructor must match the name of the enclosing class._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_dependency",
    "description": "_Publishable packages can't have '{0}' dependencies._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_deprecated_extend_annotation",
    "description": "_The annotation '@Deprecated.extend' can only be applied to extendable classes._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_deprecated_implement_annotation",
    "description": "_The annotation '@Deprecated.implement' can only be applied to implementable classes._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_deprecated_instantiate_annotation",
    "description": "_The annotation '@Deprecated.instantiate' can only be applied to classes._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_deprecated_mixin_annotation",
    "description": "_The annotation '@Deprecated.mixin' can only be applied to classes._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_deprecated_subclass_annotation",
    "description": "_The annotation '@Deprecated.subclass' can only be applied to subclassable classes and mixins._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_exception_value",
    "description": "_The method {0} can't have an exceptional return value (the second argument) when the return type of the function is either 'void', 'Handle' or 'Pointer'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_export_of_internal_element",
    "description": "_The member '{0}' can't be exported as a part of a package's public API._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_export_of_internal_element_indirectly",
    "description": "_The member '{0}' can't be exported as a part of a package's public API, but is indirectly exported as part of the signature of '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_extension_argument_count",
    "description": "_Extension overrides must have exactly one argument: the value of 'this' in the extension method._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_factory_method_decl",
    "description": "_Factory method '{0}' must have a return type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_factory_method_impl",
    "description": "_Factory method '{0}' doesn't return a newly allocated object._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_factory_name_not_a_class",
    "description": "_The name of a factory constructor must be the same as the name of the immediately enclosing class._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_field_name",
    "description": "_Record field names can't be a dollar sign followed by an integer when the integer is the index of a positional field._\n\n_Record field names can't be private._\n\n_Record field names can't be the same as a member from 'Object'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_field_type_in_struct",
    "description": "_Fields in struct classes can't have the type '{0}'. They can only be declared as 'int', 'double', 'Array', 'Pointer', or subtype of 'Struct' or 'Union'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_generic_function_type",
    "description": "_Invalid generic function type._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_hex_escape",
    "description": "_An escape sequence starting with '\\x' must be followed by 2 hexadecimal digits._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_implementation_override",
    "description": "_'{0}.{1}' ('{2}') isn't a valid concrete implementation of '{3}.{1}' ('{4}')._\n\n_The setter '{0}.{1}' ('{2}') isn't a valid concrete implementation of '{3}.{1}' ('{4}')._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_initializer",
    "description": "_Not a valid initializer._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_inline_function_type",
    "description": "_Inline function types can't be used for parameters in a generic function type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_inside_unary_pattern",
    "description": "_This pattern cannot appear inside a unary pattern (cast pattern, null check pattern, or null assert pattern) without parentheses._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_internal_annotation",
    "description": "_Only public elements in a package's private API can be annotated as being internal._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_language_version_override",
    "description": "_The Dart language version override comment can't be followed by any non-whitespace characters._\n\n_The Dart language version override comment must be specified with a version number, like '2.0', after the '=' character._\n\n_The Dart language version override comment must be specified with an '=' character._\n\n_The Dart language version override comment must be specified with exactly two slashes._\n\n_The Dart language version override comment must be specified with the word 'dart' in all lower case._\n\n_The Dart language version override number can't be prefixed with a letter._\n\n_The Dart language version override number must begin with '@dart'._\n\n_The language version override can't specify a version greater than the latest known language version: {0}.{1}._\n\n_The language version override must be specified before any declaration or directive._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_literal_annotation",
    "description": "_Only const constructors can have the `@literal` annotation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_literal_in_configuration",
    "description": "_The literal in a configuration can't contain interpolation._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_modifier_on_constructor",
    "description": "_The modifier '{0}' can't be applied to the body of a constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_modifier_on_setter",
    "description": "_Setters can't use 'async', 'async*', or 'sync*'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_non_virtual_annotation",
    "description": "_The annotation '@nonVirtual' can only be applied to a concrete instance member._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_null_aware_operator",
    "description": "_The element can't be null, so the null-aware operator '?' is unnecessary._\n\n_The map entry key can't be null, so the null-aware operator '?' is unnecessary._\n\n_The map entry value can't be null, so the null-aware operator '?' is unnecessary._\n\n_The receiver can't be 'null' because of short-circuiting, so the null-aware operator '{0}' can't be used._\n\n_The receiver can't be null, so the null-aware operator '{0}' is unnecessary._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_operator",
    "description": "_The string '{0}' isn't a user-definable operator._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_operator_for_super",
    "description": "_The operator '{0}' can't be used with 'super'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_operator_questionmark_period_for_super",
    "description": "_The operator '?.' cannot be used with 'super' because 'super' cannot be null._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_option",
    "description": "_Invalid option specified for '{0}': {1}_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_override",
    "description": "_'{0}.{1}' ('{2}') isn't a valid override of '{3}.{1}' ('{4}')._\n\n_The setter '{0}.{1}' ('{2}') isn't a valid override of '{3}.{1}' ('{4}')._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_override_of_non_virtual_member",
    "description": "_The member '{0}' is declared non-virtual in '{1}' and can't be overridden in subclasses._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_pattern_variable_in_shared_case_scope",
    "description": "_The variable '{0}' doesn't have the same type and/or finality in all cases that share this body._\n\n_The variable '{0}' is available in some, but not all cases that share this body._\n\n_The variable '{0}' is not available because there is a label or 'default' case._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_platforms_field",
    "description": "_The 'platforms' field must be a map with platforms as keys._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_reference_to_generative_enum_constructor",
    "description": "_Generative enum constructors can only be used as targets of redirection._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_reference_to_this",
    "description": "_Invalid reference to 'this' expression._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_reopen_annotation",
    "description": "_The annotation '@reopen' can only be applied to a class that opens capabilities that the supertype intentionally disallows._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_required_named_param",
    "description": "_The type parameter '{0}' is annotated with @required but only named parameters without a default value can be annotated with it._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_required_optional_positional_param",
    "description": "_Incorrect use of the annotation @required on the optional positional parameter '{0}'. Optional positional parameters cannot be required._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_required_positional_param",
    "description": "_Redundant use of the annotation @required on the required positional parameter '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_return_type_for_catch_error",
    "description": "_A value of type '{0}' can't be returned by the 'onError' handler because it must be assignable to '{1}'._\n\n_The return type '{0}' isn't assignable to '{1}', as required by 'Future.catchError'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_sealed_annotation",
    "description": "_The annotation '@sealed' can only be applied to classes._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_section_format",
    "description": "_Invalid format for the '{0}' section._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_star_after_async",
    "description": "_The modifier 'async*' isn't allowed for an expression function body._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_super_formal_parameter_location",
    "description": "_Super parameters can only be used in non-redirecting generative constructors._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_super_in_initializer",
    "description": "_Can only use 'super' in an initializer for calling the superclass constructor (e.g. 'super()' or 'super.namedConstructor()')_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_sync",
    "description": "_The modifier 'sync' isn't allowed for an expression function body._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_this_in_initializer",
    "description": "_Can only use 'this' in an initializer for field initialization (e.g. 'this.x = something') and constructor redirection (e.g. 'this()' or 'this.namedConstructor())_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_type_argument_in_const_literal",
    "description": "_Constant list literals can't use a type parameter in a type argument, such as '{0}'._\n\n_Constant map literals can't use a type parameter in a type argument, such as '{0}'._\n\n_Constant set literals can't use a type parameter in a type argument, such as '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_unicode_escape_started",
    "description": "_The string '\\' can't stand alone._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_unicode_escape_u_bracket",
    "description": "_An escape sequence starting with '\\u{' must be followed by 1 to 6 hexadecimal digits followed by a '}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_unicode_escape_u_no_bracket",
    "description": "_An escape sequence starting with '\\u' must be followed by 4 hexadecimal digits._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_unicode_escape_u_started",
    "description": "_An escape sequence starting with '\\u' must be followed by 4 hexadecimal digits or from 1 to 6 digits between '{' and '}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_uri",
    "description": "_Invalid URI syntax: '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_use_of_covariant",
    "description": "_The 'covariant' keyword can only be used for parameters in instance methods or before non-final instance fields._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_use_of_covariant_in_extension",
    "description": "_Can't have modifier '{0}' in an extension._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_use_of_do_not_submit_member",
    "description": "_Uses of '{0}' should not be submitted to source control._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_use_of_identifier_augmented",
    "description": "_The identifier 'augmented' can only be used to reference the augmented declaration inside an augmentation._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_use_of_internal_member",
    "description": "_The member '{0}' can only be used within its package._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_use_of_null_value",
    "description": "_An expression whose value is always 'null' can't be dereferenced._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_use_of_protected_member",
    "description": "_The member '{0}' can only be used within instance members of subclasses of '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_use_of_type_outside_library",
    "description": "_The class '{0}' can't be extended outside of its library because it's a final class._\n\n_The class '{0}' can't be extended outside of its library because it's an interface class._\n\n_The class '{0}' can't be extended, implemented, or mixed in outside of its library because it's a sealed class._\n\n_The class '{0}' can't be implemented outside of its library because it's a base class._\n\n_The class '{0}' can't be implemented outside of its library because it's a final class._\n\n_The class '{0}' can't be used as a mixin superclass constraint outside of its library because it's a final class._\n\n_The mixin '{0}' can't be implemented outside of its library because it's a base mixin._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_use_of_visible_for_overriding_member",
    "description": "_The member '{0}' can only be used for overriding._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_use_of_visible_for_template_member",
    "description": "_The member '{0}' can only be used within '{1}' or a template library._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_use_of_visible_for_testing_member",
    "description": "_The member '{0}' can only be used within '{1}' or a test._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_visibility_annotation",
    "description": "_The member '{0}' is annotated with '{1}', but this annotation is only meaningful on declarations of public members._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_visible_for_overriding_annotation",
    "description": "_The annotation 'visibleForOverriding' can only be applied to a public instance member that can be overridden._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_visible_outside_template_annotation",
    "description": "_The annotation 'visibleOutsideTemplate' can only be applied to a member of a class, enum, or mixin that is annotated with 'visibleForTemplate'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_widget_preview_application",
    "description": "_The '@Preview(...)' annotation can only be applied to public, statically accessible constructors and functions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_widget_preview_private_argument",
    "description": "_'@Preview(...)' can only accept arguments that consist of literals and public symbols._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invocation_of_extension_without_call",
    "description": "_The extension '{0}' doesn't define a 'call' method so the override can't be used in an invocation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invocation_of_non_function",
    "description": "_'{0}' isn't a function._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invocation_of_non_function_expression",
    "description": "_The expression doesn't evaluate to a function, so it can't be invoked._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "label_in_outer_scope",
    "description": "_Can't reference label '{0}' declared in an outer method._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "label_undefined",
    "description": "_Can't reference an undefined label '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "late_final_field_with_const_constructor",
    "description": "_Can't have a late final field in a class with a generative const constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "late_final_local_already_assigned",
    "description": "_The late final local variable is already assigned._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "late_pattern_variable_declaration",
    "description": "_A pattern variable declaration may not use the `late` keyword._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "leaf_call_must_not_return_handle",
    "description": "_FFI leaf call can't return a 'Handle'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "leaf_call_must_not_take_handle",
    "description": "_FFI leaf call can't take arguments of type 'Handle'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "library_directive_not_first",
    "description": "_The library directive must appear before all other directives._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "list_element_type_not_assignable",
    "description": "_The element type '{0}' can't be assigned to the list type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "literal_with_class",
    "description": "_A {0} literal can't be prefixed by '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "literal_with_class_and_new",
    "description": "_A {0} literal can't be prefixed by 'new {1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "literal_with_new",
    "description": "_A literal can't be prefixed by 'new'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "local_function_declaration_modifier",
    "description": "_Local function declarations can't specify any modifiers._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "main_first_positional_parameter_type",
    "description": "_The type of the first positional parameter of the 'main' function must be a supertype of 'List<String>'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "main_has_required_named_parameters",
    "description": "_The function 'main' can't have any required named parameters._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "main_has_too_many_required_positional_parameters",
    "description": "_The function 'main' can't have more than two required positional parameters._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "main_is_not_function",
    "description": "_The declaration named 'main' must be a function._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "map_entry_not_in_map",
    "description": "_Map entries can only be used in a map literal._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "map_key_type_not_assignable",
    "description": "_The element type '{0}' can't be assigned to the map key type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "map_value_type_not_assignable",
    "description": "_The element type '{0}' can't be assigned to the map value type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "member_with_class_name",
    "description": "_A class member can't have the same name as the enclosing class._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mismatched_annotation_on_struct_field",
    "description": "_The annotation doesn't match the declared type of the field._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_annotation_on_struct_field",
    "description": "_Fields of type '{0}' in a subclass of '{1}' must have an annotation indicating the native type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_assignable_selector",
    "description": "_Missing selector such as '.identifier' or '[0]'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_assignment_in_initializer",
    "description": "_Expected an assignment after the field name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_catch_or_finally",
    "description": "_A try block must be followed by an 'on', 'catch', or 'finally' clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_closing_parenthesis",
    "description": "_The closing parenthesis is missing._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_const_final_var_or_type",
    "description": "_Variables must be declared using the keywords 'const', 'final', 'var' or a type name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_const_in_list_literal",
    "description": "_Seeing this message constitutes a bug. Please report it._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_const_in_map_literal",
    "description": "_Seeing this message constitutes a bug. Please report it._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_const_in_set_literal",
    "description": "_Seeing this message constitutes a bug. Please report it._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_dart_library",
    "description": "_Required library '{0}' is missing._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_default_value_for_parameter",
    "description": "_The parameter '{0}' can't have a value of 'null' because of its type, but the implicit default value is 'null'._\n\n_With null safety, use the 'required' keyword, not the '@required' annotation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_dependency",
    "description": "_Missing a dependency on imported package '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_digit",
    "description": "_Decimal digit expected._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_enum_body",
    "description": "_An enum definition must have a body with at least one constant name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_enum_constant_in_switch",
    "description": "_Missing case clause for '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_exception_value",
    "description": "_The method {0} must have an exceptional return value (the second argument) when the return type of the function is neither 'void', 'Handle', nor 'Pointer'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_expression_in_initializer",
    "description": "_Expected an expression after the assignment operator._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_expression_in_throw",
    "description": "_Missing expression after 'throw'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_field_type_in_struct",
    "description": "_Fields in struct classes must have an explicitly declared type of 'int', 'double' or 'Pointer'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_function_body",
    "description": "_A function body must be provided._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_function_keyword",
    "description": "_Function types must have the keyword 'Function' before the parameter list._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_function_parameters",
    "description": "_Functions must have an explicit list of parameters._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_get",
    "description": "_Getters must have the keyword 'get' before the getter name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_hex_digit",
    "description": "_Hexadecimal digit expected._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_identifier",
    "description": "_Expected an identifier._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_initializer",
    "description": "_Expected an initializer._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_keyword_operator",
    "description": "_Operator declarations must be preceded by the keyword 'operator'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_method_parameters",
    "description": "_Methods must have an explicit list of parameters._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_name",
    "description": "_The 'name' field is required but missing._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_named_pattern_field_name",
    "description": "_The getter name is not specified explicitly, and the pattern is not a variable._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_name_for_named_parameter",
    "description": "_Named parameters in a function type must have a name_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_name_in_library_directive",
    "description": "_Library directives must include a library name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_name_in_part_of_directive",
    "description": "_Part-of directives must include a library name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_override_of_must_be_overridden",
    "description": "_Missing concrete implementation of '{0}'._\n\n_Missing concrete implementations of '{0}' and '{1}'._\n\n_Missing concrete implementations of '{0}', '{1}', and {2} more._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_prefix_in_deferred_import",
    "description": "_Deferred imports should have a prefix._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_primary_constructor",
    "description": "_An extension type declaration must have a primary constructor declaration._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_primary_constructor_parameters",
    "description": "_A primary constructor declaration must have formal parameters._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_quote",
    "description": "_Expected quote (' or \")._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_required_argument",
    "description": "_The named parameter '{0}' is required, but there's no corresponding argument._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_required_param",
    "description": "_The parameter '{0}' is required._\n\n_The parameter '{0}' is required. {1}._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_return",
    "description": "_This function has a return type of '{0}', but doesn't end with a return statement._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_size_annotation_carray",
    "description": "_Fields of type 'Array' must have exactly one 'Array' annotation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_star_after_sync",
    "description": "_The modifier 'sync' must be followed by a star ('*')._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_statement",
    "description": "_Expected a statement._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_terminator_for_parameter_group",
    "description": "_There is no '{0}' to close the parameter group._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_typedef_parameters",
    "description": "_Typedefs must have an explicit list of parameters._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_variable_in_for_each",
    "description": "_A loop variable must be declared in a for-each loop before the 'in', but none was found._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_variable_pattern",
    "description": "_Variable pattern '{0}' is missing in this branch of the logical-or pattern._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixed_parameter_groups",
    "description": "_Can't have both positional and named parameters in a single parameter list._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_application_concrete_super_invoked_member_type",
    "description": "_The super-invoked member '{0}' has the type '{1}', and the concrete member in the class has the type '{2}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_application_not_implemented_interface",
    "description": "_'{0}' can't be mixed onto '{1}' because '{1}' doesn't implement '{2}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_application_no_concrete_super_invoked_member",
    "description": "_The class doesn't have a concrete implementation of the super-invoked member '{0}'._\n\n_The class doesn't have a concrete implementation of the super-invoked setter '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_class_declaration_extends_not_object",
    "description": "_The class '{0}' can't be declared a mixin because it extends a class other than 'Object'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_class_declares_constructor",
    "description": "_The class '{0}' can't be used as a mixin because it declares a constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_declares_constructor",
    "description": "_Mixins can't declare constructors._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_inherits_from_not_object",
    "description": "_The class '{0}' can't be used as a mixin because it extends a class other than 'Object'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_instantiate",
    "description": "_Mixins can't be instantiated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_of_non_class",
    "description": "_Classes can only mix in mixins and classes._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_on_sealed_class",
    "description": "_The class '{0}' shouldn't be used as a mixin constraint because it is sealed, and any class mixing in this mixin must have '{0}' as a superclass._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_super_class_constraint_deferred_class",
    "description": "_Deferred classes can't be used as superclass constraints._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_super_class_constraint_non_interface",
    "description": "_Only classes and mixins can be used as superclass constraints._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_with_clause",
    "description": "_A mixin can't have a with clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "mixin_with_non_class_superclass",
    "description": "_Mixin can only be applied to class._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "modifier_out_of_order",
    "description": "_The modifier '{0}' should be before the modifier '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_clauses",
    "description": "_Each '{0}' definition can have at most one '{1}' clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_combinators",
    "description": "_Using multiple 'hide' or 'show' combinators is never necessary and often produces surprising results._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_extends_clauses",
    "description": "_Each class definition can have at most one extends clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_implements_clauses",
    "description": "_Each class or mixin definition can have at most one implements clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_library_directives",
    "description": "_Only one library directive may be declared in a file._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_named_parameter_groups",
    "description": "_Can't have multiple groups of named parameters in a single parameter list._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_on_clauses",
    "description": "_Each mixin definition can have at most one on clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_part_of_directives",
    "description": "_Only one part-of directive may be declared in a file._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_plugins",
    "description": "_Multiple plugins can't be enabled._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_positional_parameter_groups",
    "description": "_Can't have multiple groups of positional parameters in a single parameter list._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_redirecting_constructor_invocations",
    "description": "_Constructors can have only one 'this' redirection, at most._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_representation_fields",
    "description": "_Each extension type should have exactly one representation field._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_super_initializers",
    "description": "_A constructor can have at most one 'super' initializer._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_variables_in_for_each",
    "description": "_A single loop variable must be declared in a for-each loop before the 'in', but {0} were found._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_variance_modifiers",
    "description": "_Each type parameter can have at most one variance modifier._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "multiple_with_clauses",
    "description": "_Each class definition can have at most one with clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "must_be_a_native_function_type",
    "description": "_The type '{0}' given to '{1}' must be a valid 'dart:ffi' native function type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "must_be_a_subtype",
    "description": "_The type '{0}' must be a subtype of '{1}' for '{2}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "must_be_immutable",
    "description": "_This class (or a class that this class inherits from) is marked as '@immutable', but one or more of its instance fields aren't final: {0}_",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "must_call_super",
    "description": "_This method overrides a method annotated as '@mustCallSuper' in '{0}', but doesn't invoke the overridden method._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "must_return_void",
    "description": "_The return type of the function passed to 'NativeCallable.listener' must be 'void' rather than '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "named_function_expression",
    "description": "_Function expressions can't be named._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "named_function_type",
    "description": "_Function types can't be named._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "named_parameter_outside_group",
    "description": "_Named parameters must be enclosed in curly braces ('{' and '}')._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "name_not_string",
    "description": "_The value of the 'name' field is required to be a string._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "native_clause_in_non_sdk_code",
    "description": "_Native clause can only be used in the SDK and code that is loaded through native extensions._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "native_clause_should_be_annotation",
    "description": "_Native clause in this form is deprecated._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "native_field_invalid_type",
    "description": "_'{0}' is an unsupported type for native fields. Native fields only support pointers, arrays or numeric and compound types._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "native_field_missing_type",
    "description": "_The native type of this field could not be inferred and must be specified in the annotation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "native_field_not_static",
    "description": "_Native fields must be static._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "native_function_body_in_non_sdk_code",
    "description": "_Native functions can only be declared in the SDK and code that is loaded through native extensions._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "native_function_missing_type",
    "description": "_The native type of this function couldn't be inferred so it must be specified in the annotation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "negative_variable_dimension",
    "description": "_The variable dimension of a variable-length array must be non-negative._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "new_with_undefined_constructor",
    "description": "_The class '{0}' doesn't have a constructor named '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "new_with_undefined_constructor_default",
    "description": "_The class '{0}' doesn't have an unnamed constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_abstract_class_inherits_abstract_member",
    "description": "_Missing concrete implementation of '{0}'._\n\n_Missing concrete implementations of '{0}' and '{1}'._\n\n_Missing concrete implementations of '{0}', '{1}', '{2}', '{3}', and {4} more._\n\n_Missing concrete implementations of '{0}', '{1}', '{2}', and '{3}'._\n\n_Missing concrete implementations of '{0}', '{1}', and '{2}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_bool_condition",
    "description": "_Conditions must have a static type of 'bool'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_bool_expression",
    "description": "_The expression in an assert must be of type 'bool'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_bool_negation_expression",
    "description": "_A negation operand must have a static type of 'bool'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_bool_operand",
    "description": "_The operands of the operator '{0}' must be assignable to 'bool'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_annotation_constructor",
    "description": "_Annotation creation can only call a const constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_case_expression",
    "description": "_Case expressions must be constant._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_case_expression_from_deferred_library",
    "description": "_Constant values from a deferred library can't be used as a case expression._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_default_value",
    "description": "_The default value of an optional parameter must be constant._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_default_value_from_deferred_library",
    "description": "_Constant values from a deferred library can't be used as a default parameter value._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_list_element",
    "description": "_The values in a const list literal must be constants._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_map_element",
    "description": "_The elements in a const map literal must be constant._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_map_key",
    "description": "_The keys in a const map literal must be constant._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_map_pattern_key",
    "description": "_Key expressions in map patterns must be constants._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_map_value",
    "description": "_The values in a const map literal must be constant._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_record_field",
    "description": "_The fields in a const record literal must be constants._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_record_field_from_deferred_library",
    "description": "_Constant values from a deferred library can't be used as fields in a 'const' record literal._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_relational_pattern_expression",
    "description": "_The relational pattern expression must be a constant._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_set_element",
    "description": "_The values in a const set literal must be constants._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constant_type_argument",
    "description": "_The type arguments to '{0}' must be known at compile time, so they can't be type parameters._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_constructor_factory",
    "description": "_Only a constructor can be declared to be a factory._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_const_argument_for_const_parameter",
    "description": "_Argument '{0}' must be a constant._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_const_call_to_literal_constructor",
    "description": "_This instance creation must be 'const', because the {0} constructor is marked as '@literal'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_const_generative_enum_constructor",
    "description": "_Generative enum constructors must be 'const'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_const_map_as_expression_statement",
    "description": "_A non-constant map or set literal without type arguments can't be used as an expression statement._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_covariant_type_parameter_position_in_representation_type",
    "description": "_An extension type parameter can't be used in a non-covariant position of its representation type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_exhaustive_switch_expression",
    "description": "_The type '{0}' isn't exhaustively matched by the switch cases since it doesn't match the pattern '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_exhaustive_switch_statement",
    "description": "_The type '{0}' isn't exhaustively matched by the switch cases since it doesn't match the pattern '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_final_field_in_enum",
    "description": "_Enums can only declare final fields._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_generative_constructor",
    "description": "_The generative constructor '{0}' is expected, but a factory was found._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_generative_implicit_constructor",
    "description": "_The unnamed constructor of superclass '{0}' (called by the default constructor of '{1}') must be a generative constructor, but factory found._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_identifier_library_name",
    "description": "_The name of a library must be an identifier._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_native_function_type_argument_to_pointer",
    "description": "_Can't invoke 'asFunction' because the function signature '{0}' for the pointer isn't a valid C function signature._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_nullable_equals_parameter",
    "description": "_The parameter type of '==' operators should be non-nullable._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_part_of_directive_in_part",
    "description": "_The part-of directive must be the only directive in a part._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_positive_array_dimension",
    "description": "_Array dimensions must be positive numbers._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_resizable_activity",
    "description": "_The `<activity>` element should be allowed to be resized to allow users to take advantage of the multi-window environment on Chrome OS_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_sized_type_argument",
    "description": "_The type '{0}' isn't a valid type argument for '{1}'. The type argument must be a native integer, 'Float', 'Double', 'Pointer', or subtype of 'Struct', 'Union', or 'AbiSpecificInteger'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_string_literal_as_uri",
    "description": "_The URI must be a string literal._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_sync_factory",
    "description": "_Factory bodies can't use 'async', 'async*', or 'sync*'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_type_as_type_argument",
    "description": "_The name '{0}' isn't a type, so it can't be used as a type argument._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_type_in_catch_clause",
    "description": "_The name '{0}' isn't a type and can't be used in an on-catch clause._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_user_definable_operator",
    "description": "_The operator '{0}' isn't user definable._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_void_return_for_operator",
    "description": "_The return type of the operator []= must be 'void'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "non_void_return_for_setter",
    "description": "_The return type of the setter must be 'void' or absent._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "normal_before_optional_parameters",
    "description": "_Normal parameters must occur before optional parameters._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "not_assigned_potentially_non_nullable_local_variable",
    "description": "_The non-nullable local variable '{0}' must be assigned before it can be used._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "not_a_type",
    "description": "_{0} isn't a type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "not_binary_operator",
    "description": "_'{0}' isn't a binary operator._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "not_enough_positional_arguments",
    "description": "_1 positional argument expected by '{0}', but 0 found._\n\n_1 positional argument expected, but 0 found._\n\n_{0} positional arguments expected by '{1}', but {2} found._\n\n_{0} positional arguments expected, but {1} found._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "not_initialized_non_nullable_instance_field",
    "description": "_Non-nullable instance field '{0}' must be initialized._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "not_initialized_non_nullable_variable",
    "description": "_The non-nullable variable '{0}' must be initialized._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "not_instantiated_bound",
    "description": "_Type parameter bound types must be instantiated._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "not_iterable_spread",
    "description": "_Spread elements in list or set literals must implement 'Iterable'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "not_map_spread",
    "description": "_Spread elements in map literals must implement 'Map'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "not_null_aware_null_spread",
    "description": "_The Null-typed expression can't be used with a non-null-aware spread._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "no_annotation_constructor_arguments",
    "description": "_Annotation creation must have arguments._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "no_combined_super_signature",
    "description": "_Can't infer missing types in '{0}' from overridden methods: {1}._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "no_default_super_constructor",
    "description": "_The superclass '{0}' doesn't have a zero argument constructor._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "no_generative_constructors_in_superclass",
    "description": "_The class '{0}' can't extend '{1}' because '{1}' only has factory constructors (no generative constructors), and '{0}' has at least one generative constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "no_touchscreen_feature",
    "description": "_The default \"android.hardware.touchscreen\" needs to be optional for Chrome OS._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "nullable_type_in_catch_clause",
    "description": "_A potentially nullable type can't be used in an 'on' clause because it isn't valid to throw a nullable expression._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "nullable_type_in_extends_clause",
    "description": "_A class can't extend a nullable type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "nullable_type_in_implements_clause",
    "description": "_A class, mixin, or extension type can't implement a nullable type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "nullable_type_in_on_clause",
    "description": "_A mixin can't have a nullable type as a superclass constraint._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "nullable_type_in_with_clause",
    "description": "_A class or mixin can't mix in a nullable type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "null_argument_to_non_null_type",
    "description": "_'{0}' shouldn't be called with a 'null' argument for the non-nullable type argument '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "null_aware_cascade_out_of_order",
    "description": "_The '?..' cascade operator must be first in the cascade sequence._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "null_check_always_fails",
    "description": "_This null-check will always throw an exception because the expression will always evaluate to 'null'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "object_cannot_extend_another_class",
    "description": "_The class 'Object' can't extend any other class._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "obsolete_colon_for_default_value",
    "description": "_Using a colon as the separator before a default value is no longer supported._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "on_repeated",
    "description": "_The type '{0}' can be included in the superclass constraints only once._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "optional_parameter_in_operator",
    "description": "_Optional parameters aren't allowed when defining an operator._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "out_of_order_clauses",
    "description": "_The '{0}' clause must come before the '{1}' clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "override_on_non_overriding_member",
    "description": "_The field doesn't override an inherited getter or setter._\n\n_The getter doesn't override an inherited getter._\n\n_The method doesn't override an inherited method._\n\n_The setter doesn't override an inherited setter._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "packed_annotation",
    "description": "_Structs must have at most one 'Packed' annotation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "packed_annotation_alignment",
    "description": "_Only packing to 1, 2, 4, 8, and 16 bytes is supported._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "parse_error",
    "description": "_{0}_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "part_of_different_library",
    "description": "_Expected this library to be part of '{0}', not '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "part_of_name",
    "description": "_The 'part of' directive can't use a name with the enhanced-parts feature._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "part_of_non_part",
    "description": "_The included part '{0}' must have a part-of directive._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "part_of_unnamed_library",
    "description": "_The library is unnamed. A URI is expected, not a library name '{0}', in the part-of directive._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "path_does_not_exist",
    "description": "_The path '{0}' doesn't exist._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "path_not_posix",
    "description": "_The path '{0}' isn't a POSIX-style path._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "path_pubspec_does_not_exist",
    "description": "_The directory '{0}' doesn't contain a pubspec._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "pattern_assignment_declares_variable",
    "description": "_Variable '{0}' can't be declared in a pattern assignment._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "pattern_assignment_not_local_variable",
    "description": "_Only local variables can be assigned in pattern assignments._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "pattern_constant_from_deferred_library",
    "description": "_Constant values from a deferred library can't be used in patterns._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "pattern_never_matches_value_type",
    "description": "_The matched value type '{0}' can never match the required type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "pattern_type_mismatch_in_irrefutable_context",
    "description": "_The matched value of type '{0}' isn't assignable to the required type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "pattern_variable_assignment_inside_guard",
    "description": "_Pattern variables can't be assigned inside the guard of the enclosing guarded pattern._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "pattern_variable_declaration_outside_function_or_method",
    "description": "_A pattern variable declaration may not appear outside a function or method._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "permission_implies_unsupported_hardware",
    "description": "_Permission makes app incompatible for Chrome OS, consider adding optional {0} feature tag,_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "platform_value_disallowed",
    "description": "_Keys in the `platforms` field can't have values._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "positional_after_named_argument",
    "description": "_Positional arguments must occur before named arguments._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "positional_field_in_object_pattern",
    "description": "_Object patterns can only use named fields._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "positional_parameter_outside_group",
    "description": "_Positional parameters must be enclosed in square brackets ('[' and ']')._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "positional_super_formal_parameter_with_positional_argument",
    "description": "_Positional super parameters can't be used when the super constructor invocation has a positional argument._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "prefix_after_combinator",
    "description": "_The prefix ('as' clause) should come before any show/hide combinators._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "prefix_collides_with_top_level_member",
    "description": "_The name '{0}' is already used as an import prefix and can't be used to name a top-level element._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "prefix_identifier_not_followed_by_dot",
    "description": "_The name '{0}' refers to an import prefix, so it must be followed by '.'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "prefix_shadowed_by_local_declaration",
    "description": "_The prefix '{0}' can't be used here because it's shadowed by a local declaration._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "private_collision_in_mixin_application",
    "description": "_The private name '{0}', defined by '{1}', conflicts with the same name defined by '{2}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "private_optional_parameter",
    "description": "_Named parameters can't start with an underscore._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "private_setter",
    "description": "_The setter '{0}' is private and can't be accessed outside the library that declares it._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "read_potentially_unassigned_final",
    "description": "_The final variable '{0}' can't be read because it's potentially unassigned at this point._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "receiver_of_type_never",
    "description": "_The receiver is of type 'Never', and will never complete with a value._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "record_literal_one_positional_no_trailing_comma",
    "description": "_A record literal with exactly one positional field requires a trailing comma._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "record_type_one_positional_no_trailing_comma",
    "description": "_A record type with exactly one positional field requires a trailing comma._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "recursive_compile_time_constant",
    "description": "_The compile-time constant expression depends on itself._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "recursive_constant_constructor",
    "description": "_The constant constructor depends on itself._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "recursive_constructor_redirect",
    "description": "_Constructors can't redirect to themselves either directly or indirectly._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "recursive_include_file",
    "description": "_The include file '{0}' in '{1}' includes itself recursively._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "recursive_interface_inheritance",
    "description": "_'{0}' can't be a superinterface of itself: {1}._\n\n_'{0}' can't extend itself._\n\n_'{0}' can't implement itself._\n\n_'{0}' can't use itself as a mixin._\n\n_'{0}' can't use itself as a superclass constraint._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "redeclare_on_non_redeclaring_member",
    "description": "_The {0} doesn't redeclare a {0} declared in a superinterface._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "redirecting_constructor_with_body",
    "description": "_Redirecting constructors can't have a body._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "redirection_in_non_factory_constructor",
    "description": "_Only factory constructor can specify '=' redirection._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "redirect_generative_to_missing_constructor",
    "description": "_The constructor '{0}' couldn't be found in '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "redirect_generative_to_non_generative_constructor",
    "description": "_Generative constructors can't redirect to a factory constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "redirect_to_abstract_class_constructor",
    "description": "_The redirecting constructor '{0}' can't redirect to a constructor of the abstract class '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "redirect_to_invalid_function_type",
    "description": "_The redirected constructor '{0}' has incompatible parameters with '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "redirect_to_invalid_return_type",
    "description": "_The return type '{0}' of the redirected constructor isn't a subtype of '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "redirect_to_missing_constructor",
    "description": "_The constructor '{0}' couldn't be found in '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "redirect_to_non_class",
    "description": "_The name '{0}' isn't a type and can't be used in a redirected constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "redirect_to_non_const_constructor",
    "description": "_A constant redirecting constructor can't redirect to a non-constant constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "redirect_to_type_alias_expands_to_type_parameter",
    "description": "_A redirecting constructor can't redirect to a type alias that expands to a type parameter._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "referenced_before_declaration",
    "description": "_Local variable '{0}' can't be referenced before it is declared._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "refutable_pattern_in_irrefutable_context",
    "description": "_Refutable patterns can't be used in an irrefutable context._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "relational_pattern_operand_type_not_assignable",
    "description": "_The constant expression type '{0}' is not assignable to the parameter type '{1}' of the '{2}' operator._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "relational_pattern_operator_return_type_not_assignable_to_bool",
    "description": "_The return type of operators used in relational patterns must be assignable to 'bool'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "removed_lint",
    "description": "_'{0}' was removed in Dart '{1}'_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "removed_lint_use",
    "description": "_'{0}' was removed in Dart '{1}'_",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "replaced_lint",
    "description": "_'{0}' was replaced by '{1}' in Dart '{2}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "replaced_lint_use",
    "description": "_'{0}' was replaced by '{1}' in Dart '{2}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "representation_field_modifier",
    "description": "_Representation fields can't have modifiers._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "representation_field_trailing_comma",
    "description": "_The representation field can't have a trailing comma._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "rest_element_in_map_pattern",
    "description": "_A map pattern can't contain a rest pattern._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "rethrow_outside_catch",
    "description": "_A rethrow must be inside of a catch clause._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "return_in_generative_constructor",
    "description": "_Constructors can't return values._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "return_in_generator",
    "description": "_Can't return a value from a generator function that uses the 'async*' or 'sync*' modifier._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "return_of_do_not_store",
    "description": "_'{0}' is annotated with 'doNotStore' and shouldn't be returned unless '{1}' is also annotated._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "return_of_invalid_type",
    "description": "_A value of type '{0}' can't be returned from the constructor '{1}' because it has a return type of '{2}'._\n\n_A value of type '{0}' can't be returned from the function '{1}' because it has a return type of '{2}'._\n\n_A value of type '{0}' can't be returned from the method '{1}' because it has a return type of '{2}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "return_of_invalid_type_from_closure",
    "description": "_The returned type '{0}' isn't returnable from a '{1}' function, as required by the closure's context._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "return_without_value",
    "description": "_The return value is missing after 'return'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_async_exported_from_core",
    "description": "_The class '{0}' wasn't exported from 'dart:core' until version 2.1, but this code is required to be able to run on earlier versions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_as_expression_in_const_context",
    "description": "_The use of an as expression in a constant expression wasn't supported until version 2.3.2, but this code is required to be able to run on earlier versions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_bool_operator_in_const_context",
    "description": "_The use of the operator '{0}' for 'bool' operands in a constant context wasn't supported until version 2.3.2, but this code is required to be able to run on earlier versions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_constructor_tearoffs",
    "description": "_Tearing off a constructor requires the 'constructor-tearoffs' language feature._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_eq_eq_operator_in_const_context",
    "description": "_Using the operator '==' for non-primitive types wasn't supported until version 2.3.2, but this code is required to be able to run on earlier versions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_extension_methods",
    "description": "_Extension methods weren't supported until version 2.6.0, but this code is required to be able to run on earlier versions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_gt_gt_gt_operator",
    "description": "_The operator '>>>' wasn't supported until version 2.14.0, but this code is required to be able to run on earlier versions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_is_expression_in_const_context",
    "description": "_The use of an is expression in a constant context wasn't supported until version 2.3.2, but this code is required to be able to run on earlier versions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_never",
    "description": "_The type 'Never' wasn't supported until version 2.12.0, but this code is required to be able to run on earlier versions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_set_literal",
    "description": "_Set literals weren't supported until version 2.2, but this code is required to be able to run on earlier versions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_since",
    "description": "_This API is available since SDK {0}, but constraints '{1}' don't guarantee it._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_ui_as_code",
    "description": "_The for, if, and spread elements weren't supported until version 2.3.0, but this code is required to be able to run on earlier versions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sdk_version_ui_as_code_in_const_context",
    "description": "_The if and spread elements weren't supported in constant expressions until version 2.5.0, but this code is required to be able to run on earlier versions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sealed_enum",
    "description": "_Enums can't be declared to be 'sealed'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sealed_mixin",
    "description": "_A mixin can't be declared 'sealed'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "sealed_mixin_class",
    "description": "_A mixin class can't be declared 'sealed'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "setter_constructor",
    "description": "_Constructors can't be a setter._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "setter_in_function",
    "description": "_Setters can't be defined within methods or functions._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "setting_orientation_on_activity",
    "description": "_The `<activity>` element should not be locked to any orientation so that users can take advantage of the multi-window environments and larger screens on Chrome OS_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "set_element_type_not_assignable",
    "description": "_The element type '{0}' can't be assigned to the set type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "shared_deferred_prefix",
    "description": "_The prefix of a deferred import can't be used in other import directives._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "size_annotation_dimensions",
    "description": "_'Array's must have an 'Array' annotation that matches the dimensions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "spread_expression_from_deferred_library",
    "description": "_Constant values from a deferred library can't be spread into a const literal._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "stack_overflow",
    "description": "_The file has too many nested expressions or statements._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "static_access_to_instance_member",
    "description": "_Instance member '{0}' can't be accessed using static access._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "static_constructor",
    "description": "_Constructors can't be static._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "static_getter_without_body",
    "description": "_A 'static' getter must have a body._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "static_operator",
    "description": "_Operators can't be static._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "static_setter_without_body",
    "description": "_A 'static' setter must have a body._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "strict_raw_type",
    "description": "_The generic type '{0}' should have explicit type arguments but doesn't._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "subtype_of_base_or_final_is_not_base_final_or_sealed",
    "description": "_The mixin '{0}' must be 'base' because the supertype '{1}' is 'base'._\n\n_The mixin '{0}' must be 'base' because the supertype '{1}' is 'final'._\n\n_The type '{0}' must be 'base', 'final' or 'sealed' because the supertype '{1}' is 'base'._\n\n_The type '{0}' must be 'base', 'final' or 'sealed' because the supertype '{1}' is 'final'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "subtype_of_deferred_class",
    "description": "_Classes and mixins can't implement deferred classes._\n\n_Classes can't extend deferred classes._\n\n_Classes can't mixin deferred classes._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "subtype_of_disallowed_type",
    "description": "_'{0}' can't be used as a superclass constraint._\n\n_Classes and mixins can't implement '{0}'._\n\n_Classes can't extend '{0}'._\n\n_Classes can't mixin '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "subtype_of_ffi_class",
    "description": "_The class '{0}' can't extend '{1}'._\n\n_The class '{0}' can't implement '{1}'._\n\n_The class '{0}' can't mix in '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "subtype_of_sealed_class",
    "description": "_The class '{0}' shouldn't be extended, mixed in, or implemented because it's sealed._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "subtype_of_struct_class",
    "description": "_The class '{0}' can't extend '{1}' because '{1}' is a subtype of 'Struct', 'Union', or 'AbiSpecificInteger'._\n\n_The class '{0}' can't implement '{1}' because '{1}' is a subtype of 'Struct', 'Union', or 'AbiSpecificInteger'._\n\n_The class '{0}' can't mix in '{1}' because '{1}' is a subtype of 'Struct', 'Union', or 'AbiSpecificInteger'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "supertype_expands_to_type_parameter",
    "description": "_A type alias that expands to a type parameter can't be implemented._\n\n_A type alias that expands to a type parameter can't be mixed in._\n\n_A type alias that expands to a type parameter can't be used as a superclass constraint._\n\n_A type alias that expands to a type parameter can't be used as a superclass._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "super_formal_parameter_type_is_not_subtype_of_associated",
    "description": "_The type '{0}' of this parameter isn't a subtype of the type '{1}' of the associated super constructor parameter._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "super_formal_parameter_without_associated_named",
    "description": "_No associated named super constructor parameter._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "super_formal_parameter_without_associated_positional",
    "description": "_No associated positional super constructor parameter._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "super_initializer_in_object",
    "description": "_The class 'Object' can't invoke a constructor from a superclass._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "super_invocation_not_last",
    "description": "_The superconstructor call must be last in an initializer list: '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": [
      "invalid_super_invocation"
    ]
  },
  {
    "id": "super_in_enum_constructor",
    "description": "_The enum constructor can't have a 'super' initializer._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "super_in_extension",
    "description": "_The 'super' keyword can't be used in an extension because an extension doesn't have a superclass._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "super_in_extension_type",
    "description": "_The 'super' keyword can't be used in an extension type because an extension type doesn't have a superclass._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "super_in_invalid_context",
    "description": "_Invalid context for 'super' invocation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "super_in_redirecting_constructor",
    "description": "_The redirecting constructor can't have a 'super' initializer._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "switch_case_completes_normally",
    "description": "_The 'case' shouldn't complete normally._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "switch_expression_not_assignable",
    "description": "_Type '{0}' of the switch expression isn't assignable to the type '{1}' of case expressions._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "switch_has_case_after_default_case",
    "description": "_The default case should be the last case in a switch statement._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "switch_has_multiple_default_cases",
    "description": "_The 'default' case can only be declared once._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "tearoff_of_generative_constructor_of_abstract_class",
    "description": "_A generative constructor of an abstract class can't be torn off._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "text_direction_code_point_in_comment",
    "description": "_The Unicode code point 'U+{0}' changes the appearance of text from how it's interpreted by the compiler._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "text_direction_code_point_in_literal",
    "description": "_The Unicode code point 'U+{0}' changes the appearance of text from how it's interpreted by the compiler._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "throw_of_invalid_type",
    "description": "_The type '{0}' of the thrown expression must be assignable to 'Object'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "todo",
    "description": "_{0}_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "top_level_cycle",
    "description": "_The type of '{0}' can't be inferred because it depends on itself through the cycle: {1}._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "top_level_operator",
    "description": "_Operators must be declared within a class._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "typedef_in_class",
    "description": "_Typedefs can't be declared inside classes._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "type_alias_cannot_reference_itself",
    "description": "_Typedefs can't reference themselves directly or recursively via another typedef._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "type_annotation_deferred_class",
    "description": "_The deferred type '{0}' can't be used in a declaration, cast, or type test._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "type_arguments_on_type_variable",
    "description": "_Can't use type arguments with type variable '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "type_argument_not_matching_bounds",
    "description": "_'{0}' doesn't conform to the bound '{1}' of the type parameter '{2}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "type_before_factory",
    "description": "_Factory constructors cannot have a return type._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "type_check_with_null",
    "description": "_Tests for non-null should be done with '!= null'._\n\n_Tests for null should be done with '== null'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "type_parameter_on_constructor",
    "description": "_Constructors can't have type parameters._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "type_parameter_on_operator",
    "description": "_Types parameters aren't allowed when defining an operator._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "type_parameter_referenced_by_static",
    "description": "_Static members can't reference type parameters of the class._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "type_parameter_supertype_of_its_bound",
    "description": "_'{0}' can't be a supertype of its upper bound._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "type_test_with_non_type",
    "description": "_The name '{0}' isn't a type and can't be used in an 'is' expression._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "type_test_with_undefined_name",
    "description": "_The name '{0}' isn't defined, so it can't be used in an 'is' expression._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unable_get_content",
    "description": "_Unable to get content of '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unchecked_use_of_nullable_value",
    "description": "_A nullable expression can't be used as a condition._\n\n_A nullable expression can't be used as an iterator in a for-in loop._\n\n_A nullable expression can't be used in a spread._\n\n_A nullable expression can't be used in a yield-each statement._\n\n_The function can't be unconditionally invoked because it can be 'null'._\n\n_The method '{0}' can't be unconditionally invoked because the receiver can be 'null'._\n\n_The operator '{0}' can't be unconditionally invoked because the receiver can be 'null'._\n\n_The property '{0}' can't be unconditionally accessed because the receiver can be 'null'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_annotation",
    "description": "_Undefined name '{0}' used as an annotation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_class",
    "description": "_Undefined class '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_constructor_in_initializer",
    "description": "_The class '{0}' doesn't have a constructor named '{1}'._\n\n_The class '{0}' doesn't have an unnamed constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_enum_constant",
    "description": "_There's no constant named '{0}' in '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_enum_constructor",
    "description": "_The enum doesn't have a constructor named '{0}'._\n\n_The enum doesn't have an unnamed constructor._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_extension_getter",
    "description": "_The getter '{0}' isn't defined for the extension '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_extension_method",
    "description": "_The method '{0}' isn't defined for the extension '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_extension_operator",
    "description": "_The operator '{0}' isn't defined for the extension '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_extension_setter",
    "description": "_The setter '{0}' isn't defined for the extension '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_function",
    "description": "_The function '{0}' isn't defined._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_getter",
    "description": "_The getter '{0}' isn't defined for the '{1}' function type._\n\n_The getter '{0}' isn't defined for the type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_hidden_name",
    "description": "_The library '{0}' doesn't export a member with the hidden name '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_identifier",
    "description": "_Undefined name '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_identifier_await",
    "description": "_Undefined name 'await' in function body not marked with 'async'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_lint",
    "description": "_'{0}' is not a recognized lint rule._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_method",
    "description": "_The method '{0}' isn't defined for the '{1}' function type._\n\n_The method '{0}' isn't defined for the type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_named_parameter",
    "description": "_The named parameter '{0}' isn't defined._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_operator",
    "description": "_The operator '{0}' isn't defined for the type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_prefixed_name",
    "description": "_The name '{0}' is being referenced through the prefix '{1}', but it isn't defined in any of the libraries imported using that prefix._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_referenced_parameter",
    "description": "_The parameter '{0}' isn't defined by '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_setter",
    "description": "_The setter '{0}' isn't defined for the '{1}' function type._\n\n_The setter '{0}' isn't defined for the type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_shown_name",
    "description": "_The library '{0}' doesn't export a member with the shown name '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "undefined_super_member",
    "description": "_The getter '{0}' isn't defined in a superclass of '{1}'._\n\n_The method '{0}' isn't defined in a superclass of '{1}'._\n\n_The operator '{0}' isn't defined in a superclass of '{1}'._\n\n_The setter '{0}' isn't defined in a superclass of '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": [
      "undefined_super_method"
    ]
  },
  {
    "id": "undone",
    "description": "_{0}_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unexpected_dollar_in_string",
    "description": "_A '$' has special meaning inside a string, and must be followed by an identifier or an expression in curly braces ({})._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unexpected_separator_in_number",
    "description": "_Digit separators ('\\_') in a number literal can only be placed between two digits._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unexpected_terminator_for_parameter_group",
    "description": "_There is no '{0}' to open a parameter group._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unexpected_token",
    "description": "_Unexpected text '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unexpected_tokens",
    "description": "_Unexpected tokens._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unignorable_ignore",
    "description": "_The diagnostic '{0}' can't be ignored._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unknown_platform",
    "description": "_The platform '{0}' is not a recognized platform._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_cast",
    "description": "_Unnecessary cast._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_cast_pattern",
    "description": "_Unnecessary cast pattern._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_dev_dependency",
    "description": "_The dev dependency on {0} is unnecessary because there is also a normal dependency on that package._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_final",
    "description": "_The keyword 'final' isn't necessary because the parameter is implicitly 'final'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_import",
    "description": "_The import of '{0}' is unnecessary because all of the used elements are also provided by the import of '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_nan_comparison",
    "description": "_A double can't equal 'double.nan', so the condition is always 'false'._\n\n_A double can't equal 'double.nan', so the condition is always 'true'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_non_null_assertion",
    "description": "_The '!' will have no effect because the receiver can't be null._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_no_such_method",
    "description": "_Unnecessary 'noSuchMethod' declaration._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_null_assert_pattern",
    "description": "_The null-assert pattern will have no effect because the matched type isn't nullable._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_null_check_pattern",
    "description": "_The null-check pattern will have no effect because the matched type isn't nullable._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_null_comparison",
    "description": "_The operand can't be 'null', so the condition is always 'false'._\n\n_The operand can't be 'null', so the condition is always 'true'._\n\n_The operand must be 'null', so the condition is always 'false'._\n\n_The operand must be 'null', so the condition is always 'true'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_question_mark",
    "description": "_The '?' is unnecessary because '{0}' is nullable without it._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_set_literal",
    "description": "_Braces unnecessarily wrap this expression in a set literal._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_type_check",
    "description": "_Unnecessary type check; the result is always 'false'._\n\n_Unnecessary type check; the result is always 'true'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_wildcard_pattern",
    "description": "_Unnecessary wildcard pattern._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unqualified_reference_to_non_local_static_member",
    "description": "_Static members from supertypes must be qualified by the name of the defining type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unqualified_reference_to_static_member_of_extended_type",
    "description": "_Static members from the extended type or one of its superclasses must be qualified by the name of the defining type._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unreachable_switch_case",
    "description": "_This case is covered by the previous cases._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unreachable_switch_default",
    "description": "_This default clause is covered by the previous cases._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unrecognized_error_code",
    "description": "_'{0}' isn't a recognized error code._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unsupported_chrome_os_feature",
    "description": "_The feature {0} isn't supported on Chrome OS, consider making it optional._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unsupported_chrome_os_hardware",
    "description": "_The feature {0} isn't supported on Chrome OS, consider making it optional._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unsupported_operator",
    "description": "_The '{0}' operator is not supported._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unsupported_option_without_values",
    "description": "_The option '{0}' isn't supported by '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unsupported_option_with_legal_value",
    "description": "_The option '{0}' isn't supported by '{1}'. Try using the only supported option: '{2}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unsupported_option_with_legal_values",
    "description": "_The option '{0}' isn't supported by '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unsupported_value",
    "description": "_The value '{0}' isn't supported by '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unterminated_multi_line_comment",
    "description": "_Unterminated multi-line comment._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unterminated_string_literal",
    "description": "_Unterminated string literal._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unused_catch_clause",
    "description": "_The exception variable '{0}' isn't used, so the 'catch' clause can be removed._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unused_catch_stack",
    "description": "_The stack trace variable '{0}' isn't used and can be removed._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unused_element",
    "description": "_The declaration '{0}' isn't referenced._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unused_element_parameter",
    "description": "_A value for optional parameter '{0}' isn't ever given._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unused_field",
    "description": "_The value of the field '{0}' isn't used._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unused_import",
    "description": "_Unused import: '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unused_label",
    "description": "_The label '{0}' isn't used._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unused_local_variable",
    "description": "_The value of the local variable '{0}' isn't used._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unused_result",
    "description": "_'{0}' should be used. {1}._\n\n_The value of '{0}' should be used._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unused_shown_name",
    "description": "_The name {0} is shown, but isn't used._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "uri_does_not_exist",
    "description": "_Target of URI doesn't exist: '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "uri_does_not_exist_in_doc_import",
    "description": "_Target of URI doesn't exist: '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "uri_has_not_been_generated",
    "description": "_Target of URI hasn't been generated: '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "uri_with_interpolation",
    "description": "_URIs can't use string interpolation._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "use_of_native_extension",
    "description": "_Dart native extensions are deprecated and aren't available in Dart 2.15._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "use_of_void_result",
    "description": "_This expression has a type of 'void' so its value can't be used._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "values_declaration_in_enum",
    "description": "_A member named 'values' can't be declared in an enum._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "variable_length_array_not_last",
    "description": "_Variable length 'Array's must only occur as the last field of Structs._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "variable_pattern_keyword_in_declaration_context",
    "description": "_Variable patterns in declaration context can't specify 'var' or 'final' keyword._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "variable_type_mismatch",
    "description": "_A value of type '{0}' can't be assigned to a const variable of type '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "var_and_type",
    "description": "_Variables can't be declared using both 'var' and a type name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "var_as_type_name",
    "description": "_The keyword 'var' can't be used as a type name._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "var_class",
    "description": "_Classes can't be declared to be 'var'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "var_enum",
    "description": "_Enums can't be declared to be 'var'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "var_return_type",
    "description": "_The return type can't be 'var'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "var_typedef",
    "description": "_Typedefs can't be declared to be 'var'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "void_with_type_arguments",
    "description": "_Type 'void' can't have type arguments._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "with_before_extends",
    "description": "_The extends clause must be before the with clause._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "workspace_field_not_list",
    "description": "_The value of the 'workspace' field is required to be a list of relative file paths._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "workspace_value_not_string",
    "description": "_Workspace entries are required to be directory paths (strings)._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "workspace_value_not_subdirectory",
    "description": "_Workspace values must be a relative path of a subdirectory of '{0}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_explicit_type_parameter_variance_in_superinterface",
    "description": "_'{0}' is an '{1}' type parameter and can't be used in an '{2}' position in '{3}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_number_of_parameters_for_operator",
    "description": "_Operator '-' should declare 0 or 1 parameter, but {0} found._\n\n_Operator '{0}' should declare exactly {1} parameters, but {2} found._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_number_of_parameters_for_setter",
    "description": "_Setters must declare exactly one required positional parameter._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_number_of_type_arguments",
    "description": "_The type '{0}' is declared with {1} type parameters, but {2} type arguments were given._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_number_of_type_arguments_constructor",
    "description": "_The constructor '{0}.{1}' doesn't have type parameters._\n\n_The constructor '{0}.{1}` doesn't have type parameters._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_number_of_type_arguments_enum",
    "description": "_The enum is declared with {0} type parameters, but {1} type arguments were given._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_number_of_type_arguments_extension",
    "description": "_The extension '{0}' is declared with {1} type parameters, but {2} type arguments were given._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_number_of_type_arguments_function",
    "description": "_The function '{0}' is declared with {1} type parameters, but {2} type arguments were given._\n\n_This function is declared with {0} type parameters, but {1} type arguments were given._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_number_of_type_arguments_method",
    "description": "_The method '{0}' is declared with {1} type parameters, but {2} type arguments are given._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_separator_for_positional_parameter",
    "description": "_The default value of a positional parameter should be preceded by '='._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_terminator_for_parameter_group",
    "description": "_Expected '{0}' to close parameter group._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_type_parameter_variance_in_superinterface",
    "description": "_'{0}' can't be used contravariantly or invariantly in '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "wrong_type_parameter_variance_position",
    "description": "_The '{0}' type parameter '{1}' can't be used in an '{2}' position._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "yield_in_non_generator",
    "description": "_Yield statements must be in a generator function (one marked with either 'async*' or 'sync*')._\n\n_Yield-each statements must be in a generator function (one marked with either 'async*' or 'sync*')._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "yield_of_invalid_type",
    "description": "_A yielded value of type '{0}' must be assignable to '{1}'._\n\n_The type '{0}' implied by the 'yield*' expression must be assignable to '{1}'._",
    "hasDocumentation": true,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "always_declare_return_types",
    "description": "_The function '{0}' should have a return type but doesn't._\n\n_The method '{0}' should have a return type but doesn't._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "always_put_control_body_on_new_line",
    "description": "_Statement should be on a separate line._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "always_put_required_named_parameters_first",
    "description": "_Required named parameters should be before optional named parameters._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "always_require_non_null_named_parameters",
    "description": "",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "always_specify_types",
    "description": "_Missing type annotation._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "always_use_package_imports",
    "description": "_Use 'package:' imports for files in the 'lib' directory._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "analyzer_element_model_tracking_bad",
    "description": "_Bad tracking annotation for this member._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "analyzer_element_model_tracking_more_than_one",
    "description": "_There can be only one tracking annotation._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "analyzer_element_model_tracking_zero",
    "description": "_No required tracking annotation._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "analyzer_public_api_bad_part_directive",
    "description": "_Part directives in the analyzer public API should point to files in the analyzer public API._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "analyzer_public_api_bad_type",
    "description": "_Element makes use of type(s) which is not part of the analyzer public API: {0}._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "analyzer_public_api_exports_non_public_name",
    "description": "_Export directive exports element(s) that are not part of the analyzer public API: {0}._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "analyzer_public_api_impl_in_public_api",
    "description": "_Declarations in the analyzer public API should not end in \"Impl\"._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "annotate_overrides",
    "description": "_The member '{0}' overrides an inherited member but isn't annotated with '@override'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "annotate_redeclares",
    "description": "_The member '{0}' is redeclaring but isn't annotated with '@redeclare'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_annotating_with_dynamic",
    "description": "_Unnecessary 'dynamic' type annotation._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_as",
    "description": "",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_bool_literals_in_conditional_expressions",
    "description": "_Conditional expressions with a 'bool' literal can be simplified._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_catches_without_on_clauses",
    "description": "_Catch clause should use 'on' to specify the type of exception being caught._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_catching_errors",
    "description": "_The type 'Error' should not be caught._\n\n_The type '{0}' should not be caught because it is a subclass of 'Error'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_classes_with_only_static_members",
    "description": "_Classes should define instance members._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_double_and_int_checks",
    "description": "_Explicit check for double or int._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_dynamic_calls",
    "description": "_Method invocation or property access on a 'dynamic' target._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_empty_else",
    "description": "_Empty statements are not allowed in an 'else' clause._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_equals_and_hash_code_on_mutable_classes",
    "description": "_The method '{0}' should not be overridden in classes not annotated with '@immutable'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_escaping_inner_quotes",
    "description": "_Unnecessary escape of '{0}'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_field_initializers_in_const_classes",
    "description": "_Fields in 'const' classes should not have initializers._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_final_parameters",
    "description": "_Parameters should not be marked as 'final'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_function_literals_in_foreach_calls",
    "description": "_Function literals shouldn't be passed to 'forEach'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_futureor_void",
    "description": "_Don't use the type 'FutureOr<void>'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_implementing_value_types",
    "description": "_Classes that override '==' should not be implemented._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_init_to_null",
    "description": "_Redundant initialization to 'null'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_js_rounded_ints",
    "description": "_Integer literal can't be represented exactly when compiled to JavaScript._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_multiple_declarations_per_line",
    "description": "_Multiple variables declared on a single line._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_null_checks_in_equality_operators",
    "description": "_Unnecessary null comparison in implementation of '=='._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_positional_boolean_parameters",
    "description": "_'bool' parameters should be named parameters._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_print",
    "description": "_Don't invoke 'print' in production code._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_private_typedef_functions",
    "description": "_The typedef is unnecessary because it is only used in one place._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_redundant_argument_values",
    "description": "_The value of the argument is redundant because it matches the default value._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_relative_lib_imports",
    "description": "_Can't use a relative path to import a library in 'lib'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_renaming_method_parameters",
    "description": "_The parameter name '{0}' doesn't match the name '{1}' in the overridden method._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_return_types_on_setters",
    "description": "_Unnecessary return type on a setter._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_returning_null",
    "description": "",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_returning_null_for_future",
    "description": "",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_returning_null_for_void",
    "description": "_Don't return 'null' from a function with a return type of 'void'._\n\n_Don't return 'null' from a method with a return type of 'void'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_returning_this",
    "description": "_Don't return 'this' from a method._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_setters_without_getters",
    "description": "_Setter has no corresponding getter._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_shadowing_type_parameters",
    "description": "_The type parameter '{0}' shadows a type parameter from the enclosing {1}._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_single_cascade_in_expression_statements",
    "description": "_Unnecessary cascade expression._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_slow_async_io",
    "description": "_Use of an async 'dart:io' method._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_type_to_string",
    "description": "_Using 'toString' on a 'Type' is not safe in production code._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_types_as_parameter_names",
    "description": "_The parameter name '{0}' matches a visible type name._\n\n_The type parameter name '{0}' matches a visible type name._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_types_on_closure_parameters",
    "description": "_Unnecessary type annotation on a function expression parameter._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_unnecessary_containers",
    "description": "_Unnecessary instance of 'Container'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_unstable_final_fields",
    "description": "",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_unused_constructor_parameters",
    "description": "_The parameter '{0}' is not used in the constructor._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_void_async",
    "description": "_An 'async' function should have a 'Future' return type when it doesn't return a value._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "avoid_web_libraries_in_flutter",
    "description": "_Don't use web-only libraries outside Flutter web plugins._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "await_only_futures",
    "description": "_Uses 'await' on an instance of '{0}', which is not a subtype of 'Future'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "camel_case_extensions",
    "description": "_The extension name '{0}' isn't an UpperCamelCase identifier._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "camel_case_types",
    "description": "_The type name '{0}' isn't an UpperCamelCase identifier._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "cancel_subscriptions",
    "description": "_Uncancelled instance of 'StreamSubscription'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "cascade_invocations",
    "description": "_Unnecessary duplication of receiver._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "cast_nullable_to_non_nullable",
    "description": "_Don't cast a nullable value to a non-nullable type._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "close_sinks",
    "description": "_Unclosed instance of 'Sink'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "collection_methods_unrelated_type",
    "description": "_The argument type '{0}' isn't related to '{1}'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "combinators_ordering",
    "description": "_Sort combinator names alphabetically._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "comment_references",
    "description": "_The referenced name isn't visible in scope._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "conditional_uri_does_not_exist",
    "description": "_The target of the conditional URI '{0}' doesn't exist._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "conflicting_key",
    "description": "_The key '{0}' can't be used when '{1}' is also used._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "constant_identifier_names",
    "description": "_The constant name '{0}' isn't a lowerCamelCase identifier._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "control_flow_in_finally",
    "description": "_Use of '{0}' in a 'finally' clause._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "curly_braces_in_flow_control_structures",
    "description": "_Statements in {0} should be enclosed in a block._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "dangling_library_doc_comments",
    "description": "_Dangling library doc comment._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "depend_on_referenced_packages",
    "description": "_The imported package '{0}' isn't a dependency of the importing package._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "deprecated_consistency",
    "description": "_Constructors in a deprecated class should be deprecated._\n\n_Fields that are initialized by a deprecated parameter should be deprecated._\n\n_Parameters that initialize a deprecated field should be deprecated._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "deprecated_member_use_from_same_package",
    "description": "_'{0}' is deprecated and shouldn't be used._\n\n_'{0}' is deprecated and shouldn't be used. {1}_",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "diagnostic_describe_all_properties",
    "description": "_The public property isn't described by either 'debugFillProperties' or 'debugDescribeChildren'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "directives_ordering",
    "description": "_Place 'dart:' {0} before other {0}._\n\n_Place 'package:' {0} before relative {0}._\n\n_Sort directive sections alphabetically._\n\n_Specify exports in a separate section after all imports._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "discarded_futures",
    "description": "_'Future'-returning calls in a non-'async' function._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "do_not_use_environment",
    "description": "_Invalid use of an environment declaration._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "document_ignores",
    "description": "_Missing documentation explaining why the diagnostic is ignored._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "empty_catches",
    "description": "_Empty catch block._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "empty_constructor_bodies",
    "description": "_Empty constructor bodies should be written using a ';' rather than '{}'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "empty_statements",
    "description": "_Unnecessary empty statement._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "enable_null_safety",
    "description": "",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "eol_at_end_of_file",
    "description": "_Missing a newline at the end of the file._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "erase_dart_type_extension_types",
    "description": "_Unsafe use of 'DartType' in an 'is' check._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "exhaustive_cases",
    "description": "_Missing case clauses for some constants in '{0}'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "expected_primary",
    "description": "_Expected either an identifier or a string literal._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "file_names",
    "description": "_The file name '{0}' isn't a lower\\_case\\_with\\_underscores identifier._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "flutter_style_todos",
    "description": "_To-do comment doesn't follow the Flutter style._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "hash_and_equals",
    "description": "_Missing a corresponding override of '{0}'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "implementation_imports",
    "description": "_Import of a library in the 'lib/src' directory of another package._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "implicit_call_tearoffs",
    "description": "_Implicit tear-off of the 'call' method._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "implicit_reopen",
    "description": "_The {0} '{1}' reopens '{2}' because it is not marked '{3}'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "incompatible_element_kind",
    "description": "_An element of kind '{0}' can't be replaced by an element of kind '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_case_patterns",
    "description": "_This expression is not valid in a 'case' clause in Dart 3.0._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "invalid_change_for_kind",
    "description": "_A change of type '{0}' can't be used for an element of kind '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_character",
    "description": "_Invalid character '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_key",
    "description": "_Keys must be of type 'String' but found the type '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_parameter_style",
    "description": "_The parameter style must be one of the following: {0}._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_required_if",
    "description": "_The key 'requiredIf' can only be used with optional named parameters._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_runtime_check_with_js_interop_types",
    "description": "_Cast from '{0}' to '{1}' casts a Dart value to a JS interop type, which might not be platform-consistent._\n\n_Cast from '{0}' to '{1}' casts a JS interop value to a Dart type, which might not be platform-consistent._\n\n_Cast from '{0}' to '{1}' casts a JS interop value to an incompatible JS interop type, which might not be platform-consistent._\n\n_Runtime check between '{0}' and '{1}' checks whether a Dart value is a JS interop type, which might not be platform-consistent._\n\n_Runtime check between '{0}' and '{1}' checks whether a JS interop value is a Dart type, which might not be platform-consistent._\n\n_Runtime check between '{0}' and '{1}' involves a non-trivial runtime check between two JS interop types that might not be platform-consistent._\n\n_Runtime check between '{0}' and '{1}' involves a runtime check between a JS interop value and an unrelated JS interop type that will always be true and won't check the underlying type._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "invalid_value",
    "description": "_The value of '{0}' should be of type '{1}' but is of type '{2}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invalid_value_one_of",
    "description": "_The value of '{0}' must be one of the following: '{1}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "invariant_booleans",
    "description": "",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "iterable_contains_unrelated_type",
    "description": "",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "join_return_with_assignment",
    "description": "_Assignment could be inlined in 'return' statement._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "leading_newlines_in_multiline_strings",
    "description": "_Missing a newline at the beginning of a multiline string._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "library_annotations",
    "description": "_This annotation should be attached to a library directive._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "library_names",
    "description": "_The library name '{0}' isn't a lower\\_case\\_with\\_underscores identifier._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "library_prefixes",
    "description": "_The prefix '{0}' isn't a lower\\_case\\_with\\_underscores identifier._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "library_private_types_in_public_api",
    "description": "_Invalid use of a private type in a public API._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "lines_longer_than_80_chars",
    "description": "_The line length exceeds the 80-character limit._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "list_remove_unrelated_type",
    "description": "",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "literal_only_boolean_expressions",
    "description": "_The Boolean expression has a constant value._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "matching_super_parameters",
    "description": "_The super parameter named '{0}'' does not share the same name as the corresponding parameter in the super constructor, '{1}'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "missing_code_block_language_in_doc_comment",
    "description": "_The code block is missing a specified language._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "missing_key",
    "description": "_Missing the required key '{0}'._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_one_of_multiple_keys",
    "description": "_Exactly one of the following keys must be provided: {0}._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_template_end",
    "description": "_Missing the end brace for the template._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_token",
    "description": "_Expected to find {0}._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_uri",
    "description": "_At least one URI must be provided._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "missing_whitespace_between_adjacent_strings",
    "description": "_Missing whitespace between adjacent strings._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "no_adjacent_strings_in_list",
    "description": "_Don't use adjacent strings in a list literal._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "no_default_cases",
    "description": "_Invalid use of 'default' member in a switch._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "no_duplicate_case_values",
    "description": "_The value of the case clause ('{0}') is equal to the value of an earlier case clause ('{1}')._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "no_leading_underscores_for_library_prefixes",
    "description": "_The library prefix '{0}' starts with an underscore._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "no_leading_underscores_for_local_identifiers",
    "description": "_The local variable '{0}' starts with an underscore._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "no_literal_bool_comparisons",
    "description": "_Unnecessary comparison to a boolean literal._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "no_logic_in_create_state",
    "description": "_Don't put any logic in 'createState'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "no_runtimetype_tostring",
    "description": "_Using 'toString' on a 'Type' is not safe in production code._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "no_self_assignments",
    "description": "_The variable or property is being assigned to itself._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "no_solo_tests",
    "description": "_Don't commit soloed tests._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "no_trailing_spaces",
    "description": "_Don't create string literals with trailing spaces in tests._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "no_wildcard_variable_uses",
    "description": "_The referenced identifier is a wildcard._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "non_constant_identifier_names",
    "description": "_The variable name '{0}' isn't a lowerCamelCase identifier._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "noop_primitive_operations",
    "description": "_The expression has no effect and can be removed._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "null_check_on_nullable_type_parameter",
    "description": "_The null check operator shouldn't be used on a variable whose type is a potentially nullable type parameter._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "null_closures",
    "description": "_Closure can't be 'null' because it might be invoked._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "omit_local_variable_types",
    "description": "_Unnecessary type annotation on a local variable._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "omit_obvious_local_variable_types",
    "description": "_Omit the type annotation on a local variable when the type is obvious._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "omit_obvious_property_types",
    "description": "_The type annotation isn't needed because it is obvious._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "one_member_abstracts",
    "description": "_Unnecessary use of an abstract class._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "only_throw_errors",
    "description": "_Don't throw instances of classes that don't extend either 'Exception' or 'Error'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "overridden_fields",
    "description": "_Field overrides a field inherited from '{0}'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "package_api_docs",
    "description": "_Missing documentation for public API._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "package_names",
    "description": "_The package name '{0}' isn't a lower\\_case\\_with\\_underscores identifier._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "package_prefixed_library_names",
    "description": "_The library name is not a dot-separated path prefixed by the package name._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "parameter_assignments",
    "description": "_Invalid assignment to the parameter '{0}'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_adjacent_string_concatenation",
    "description": "_String literals shouldn't be concatenated by the '+' operator._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_asserts_in_initializer_lists",
    "description": "_Assert should be in the initializer list._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_asserts_with_message",
    "description": "_Missing a message in an assert._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_bool_in_asserts",
    "description": "",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_collection_literals",
    "description": "_Unnecessary constructor invocation._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_conditional_assignment",
    "description": "_The 'if' statement could be replaced by a null-aware assignment._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_const_constructors",
    "description": "_Use 'const' with the constructor to improve performance._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_const_constructors_in_immutables",
    "description": "_Constructors in '@immutable' classes should be declared as 'const'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_const_declarations",
    "description": "_Use 'const' for final variables initialized to a constant value._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_const_literals_to_create_immutables",
    "description": "_Use 'const' literals as arguments to constructors of '@immutable' classes._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_constructors_over_static_methods",
    "description": "_Static method should be a constructor._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_contains",
    "description": "_Always 'false' because 'indexOf' is always greater than or equal to -1._\n\n_Always 'true' because 'indexOf' is always greater than or equal to -1._\n\n_Unnecessary use of 'indexOf' to test for containment._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_double_quotes",
    "description": "_Unnecessary use of single quotes._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_equal_for_default_values",
    "description": "",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_expression_function_bodies",
    "description": "_Unnecessary use of a block function body._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_final_fields",
    "description": "_The private field {0} could be 'final'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_final_in_for_each",
    "description": "_The pattern should be final._\n\n_The variable '{0}' should be final._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_final_locals",
    "description": "_Local variables should be final._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_final_parameters",
    "description": "_The parameter '{0}' should be final._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_for_elements_to_map_fromiterable",
    "description": "_Use 'for' elements when building maps from iterables._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_foreach",
    "description": "_Use 'forEach' and a tear-off rather than a 'for' loop to apply a function to every element._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_function_declarations_over_variables",
    "description": "_Use a function declaration rather than a variable assignment to bind a function to a name._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_generic_function_type_aliases",
    "description": "_Use the generic function type syntax in 'typedef's._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_if_elements_to_conditional_expressions",
    "description": "_Use an 'if' element to conditionally add elements._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_if_null_operators",
    "description": "_Use the '??' operator rather than '?:' when testing for 'null'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_initializing_formals",
    "description": "_Use an initializing formal to assign a parameter to a field._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_inlined_adds",
    "description": "_The addition of a list item could be inlined._\n\n_The addition of multiple list items could be inlined._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_int_literals",
    "description": "_Unnecessary use of a 'double' literal._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_interpolation_to_compose_strings",
    "description": "_Use interpolation to compose strings and values._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_is_empty",
    "description": "_The comparison is always 'false' because the length is always greater than or equal to 0._\n\n_The comparison is always 'true' because the length is always greater than or equal to 0._\n\n_Use 'isEmpty' instead of 'length' to test whether the collection is empty._\n\n_Use 'isNotEmpty' instead of 'length' to test whether the collection is empty._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_is_not_empty",
    "description": "_Use 'isNotEmpty' rather than negating the result of 'isEmpty'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_is_not_operator",
    "description": "_Use the 'is!' operator rather than negating the value of the 'is' operator._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_iterable_wheretype",
    "description": "_Use 'whereType' to select elements of a given type._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_mixin",
    "description": "_Only mixins should be mixed in._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_null_aware_method_calls",
    "description": "_Use a null-aware invocation of the 'call' method rather than explicitly testing for 'null'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_null_aware_operators",
    "description": "_Use the null-aware operator '?.' rather than an explicit 'null' comparison._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_relative_imports",
    "description": "_Use relative imports for files in the 'lib' directory._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_single_quotes",
    "description": "_Unnecessary use of double quotes._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_spread_collections",
    "description": "_The addition of multiple elements could be inlined._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_typing_uninitialized_variables",
    "description": "_An uninitialized field should have an explicit type annotation._\n\n_An uninitialized variable should have an explicit type annotation._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "prefer_void_to_null",
    "description": "_Unnecessary use of the type 'Null'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "provide_deprecation_message",
    "description": "_Missing a deprecation message._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "public_member_api_docs",
    "description": "_Missing documentation for a public member._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "recursive_getters",
    "description": "_The getter '{0}' recursively returns itself._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "require_trailing_commas",
    "description": "_Missing a required trailing comma._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "secure_pubspec_urls",
    "description": "_The '{0}' protocol shouldn't be used because it isn't secure._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "sized_box_for_whitespace",
    "description": "_Use a 'SizedBox' to add whitespace to a layout._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "sized_box_shrink_expand",
    "description": "_Use 'SizedBox.{0}' to avoid needing to specify the 'height' and 'width'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "slash_for_doc_comments",
    "description": "_Use the end-of-line form ('///') for doc comments._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "sort_child_properties_last",
    "description": "_The '{0}' argument should be last in widget constructor invocations._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "sort_constructors_first",
    "description": "_Constructor declarations should be before non-constructor declarations._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "sort_pub_dependencies",
    "description": "_Dependencies not sorted alphabetically._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "sort_unnamed_constructors_first",
    "description": "_Invalid location for the unnamed constructor._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "specify_nonobvious_local_variable_types",
    "description": "_Specify the type of a local variable when the type is non-obvious._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "specify_nonobvious_property_types",
    "description": "_A type annotation is needed because it isn't obvious._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "strict_top_level_inference",
    "description": "_Missing type annotation._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "super_goes_last",
    "description": "",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "switch_on_type",
    "description": "_Avoid switch statements on a 'Type'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "test_types_in_equals",
    "description": "_Missing type test for '{0}' in '=='._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "throw_in_finally",
    "description": "_Use of '{0}' in 'finally' block._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "tighten_type_of_initializing_formals",
    "description": "_Use a type annotation rather than 'assert' to enforce non-nullability._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "type_annotate_public_apis",
    "description": "_Missing type annotation on a public API._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "type_init_formals",
    "description": "_Don't needlessly type annotate initializing formals._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "type_literal_in_constant_pattern",
    "description": "_Use 'TypeName \\_' instead of a type literal._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unawaited_futures",
    "description": "_Missing an 'await' for the 'Future' computed by this expression._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "undefined_variable",
    "description": "_The variable '{0}' isn't defined._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unexpected_token",
    "description": "_Didn't expect to find {0}._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unintended_html_in_doc_comment",
    "description": "_Angle brackets will be interpreted as HTML._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unknown_accessor",
    "description": "_The accessor '{0}' is invalid._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unnecessary_async",
    "description": "_Don't make a function 'async' if it doesn't use 'await'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_await_in_return",
    "description": "_Unnecessary 'await'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_brace_in_string_interps",
    "description": "_Unnecessary braces in a string interpolation._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_breaks",
    "description": "_Unnecessary 'break' statement._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_const",
    "description": "_Unnecessary 'const' keyword._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_constructor_name",
    "description": "_Unnecessary '.new' constructor name._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_final",
    "description": "_Local variables should not be marked as 'final'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_getters_setters",
    "description": "_Unnecessary use of getter and setter to wrap a field._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_ignore",
    "description": "_The diagnostic '{0}' isn't produced at this location so it doesn't need to be ignored._\n\n_The diagnostic '{0}' isn't produced in this file so it doesn't need to be ignored._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_lambdas",
    "description": "_Closure should be a tearoff._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_late",
    "description": "_Unnecessary 'late' modifier._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_library_directive",
    "description": "_Library directives without comments or annotations should be avoided._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_library_name",
    "description": "_Library names are not necessary._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_new",
    "description": "_Unnecessary 'new' keyword._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_null_aware_assignments",
    "description": "_Unnecessary assignment of 'null'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_null_aware_operator_on_extension_on_nullable",
    "description": "_Unnecessary use of a null-aware operator to invoke an extension method on a nullable type._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_null_checks",
    "description": "_Unnecessary use of a null check ('!')._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_null_in_if_null_operators",
    "description": "_Unnecessary use of '??' with 'null'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_nullable_for_final_variable_declarations",
    "description": "_Type could be non-nullable._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_overrides",
    "description": "_Unnecessary override._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_parenthesis",
    "description": "_Unnecessary use of parentheses._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_raw_strings",
    "description": "_Unnecessary use of a raw string._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_statements",
    "description": "_Unnecessary statement._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_string_escapes",
    "description": "_Unnecessary escape in string literal._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_string_interpolations",
    "description": "_Unnecessary use of string interpolation._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_this",
    "description": "_Unnecessary 'this.' qualifier._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_to_list_in_spreads",
    "description": "_Unnecessary use of 'toList' in a spread._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_unawaited",
    "description": "_Unnecessary use of 'unawaited'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unnecessary_underscores",
    "description": "_Unnecessary use of multiple underscores._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unreachable_from_main",
    "description": "_Unreachable member '{0}' in an executable library._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unrelated_type_equality_checks",
    "description": "_The type of the operand ('{0}') isn't a subtype or a supertype of the value being matched ('{1}')._\n\n_The type of the right operand ('{0}') isn't a subtype or a supertype of the left operand ('{1}')._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unsafe_html",
    "description": "_Assigning to the attribute '{0}' is unsafe._\n\n_Invoking the constructor '{0}' is unsafe._\n\n_Invoking the method '{0}' is unsafe._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unsafe_variance",
    "description": "_This type is unsafe: a type parameter occurs in a non-covariant position._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "unsupported_key",
    "description": "_The key '{0}' isn't supported._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unsupported_static",
    "description": "_The key 'static' is only supported for elements in a class, enum, extension, or mixin._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "unsupported_version",
    "description": "_Only version '1' is supported at this time._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "use_build_context_synchronously",
    "description": "_Don't use 'BuildContext's across async gaps, guarded by an unrelated 'mounted' check._\n\n_Don't use 'BuildContext's across async gaps._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_colored_box",
    "description": "_Use a 'ColoredBox' rather than a 'Container' with only a 'Color'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_decorated_box",
    "description": "_Use 'DecoratedBox' rather than a 'Container' with only a 'Decoration'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_enums",
    "description": "_Class should be an enum._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_full_hex_values_for_flutter_colors",
    "description": "_Instances of 'Color' should be created using an 8-digit hexadecimal integer (such as '0xFFFFFFFF')._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_function_type_syntax_for_parameters",
    "description": "_Use the generic function type syntax to declare the parameter '{0}'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_if_null_to_convert_nulls_to_bools",
    "description": "_Use an if-null operator to convert a 'null' to a 'bool'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_is_even_rather_than_modulo",
    "description": "_Use '{0}' rather than '% 2'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_key_in_widget_constructors",
    "description": "_Constructors for public widgets should have a named 'key' parameter._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_late_for_private_fields_and_variables",
    "description": "_Use 'late' for private members with a non-nullable type._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_named_constants",
    "description": "_Use the constant '{0}' rather than a constructor returning the same object._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_null_aware_elements",
    "description": "_Use the null-aware marker '?' rather than a null check via an 'if'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_raw_strings",
    "description": "_Use a raw string to avoid using escapes._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_rethrow_when_possible",
    "description": "_Use 'rethrow' to rethrow a caught exception._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_setters_to_change_properties",
    "description": "_The method is used to change a property._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_string_buffers",
    "description": "_Use a string buffer rather than '+' to compose strings._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_string_in_part_of_directives",
    "description": "_The part-of directive uses a library name._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_super_parameters",
    "description": "_Parameter '{0}' could be a super parameter._\n\n_Parameters '{0}' could be super parameters._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_test_throws_matchers",
    "description": "_Use the 'throwsA' matcher instead of using 'fail' when there is no exception thrown._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_to_and_as_if_applicable",
    "description": "_Start the name of the method with 'to' or 'as'._",
    "hasDocumentation": false,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "use_truncating_division",
    "description": "_Use truncating division._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "valid_regexps",
    "description": "_Invalid regular expression syntax._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "visit_registered_nodes",
    "description": "_Declare 'visit' methods for all registered node types._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "void_checks",
    "description": "_Assignment to a variable of type 'void'._",
    "hasDocumentation": true,
    "fromLint": true,
    "previousNames": []
  },
  {
    "id": "wrong_token",
    "description": "_Expected to find {0}, but found {1}._",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  },
  {
    "id": "yaml_syntax_error",
    "description": "_Parse error: {0}_",
    "hasDocumentation": false,
    "fromLint": false,
    "previousNames": []
  }
]