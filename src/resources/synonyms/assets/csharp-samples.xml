<?xml version="1.0"?>
<synonyms>
<theme id="theme-getting-started">
  <title>Getting started</title>
  <synonym id="syn-code-embedding">
    <title>Code embedding</title>
    <code language="csharp"><![CDATA[
// Not supported directly.
// Embedding is possible via Silverlight plug-in.
]]></code>
  </synonym>
  <synonym id="syn-entry-point">
    <title>Entry point</title>
    <code language="csharp"><![CDATA[
class Program
{
    static void Main(string[] args)
    {
        // This is the entry point to a console program.
    }
}
]]></code>
  </synonym>
  <synonym id="syn-detect-language-unavailability">
    <title>Detect language unavailability</title>
    <code language="csharp"><![CDATA[
<!-- For C# apps running in Silverlight, it is possible to use fallback content inside the object tag. -->
<object data="data:application/x-silverlight," type="application/x-silverlight">
  <param name="source" value="csharpApp.xap">
  <div>Silverlight not installed.</div>
</object>
]]></code>
  </synonym>
  <synonym id="syn-printing-to-the-console">
    <title>Printing to the console</title>
    <code language="csharp"><![CDATA[
Console.WriteLine("Level completed.");
]]></code>
  </synonym>
  <synonym id="syn-modal-alerts">
    <title>Modal alerts</title>
    <code language="csharp"><![CDATA[
using System.Windows;

MessageBox.Show("Clicked on the button.");
]]></code>
  </synonym>
</theme>
<theme id="theme-code-modularity">
  <title>Code modularity</title>
  <synonym id="syn-define-a-library">
    <title>Define a library</title>
    <code language="csharp"><![CDATA[
// Libraries are compiled into assemblies and accessed at runtime.
namespace Animals
{
    public class Dog
    {
        public string noise() 
        { 
            return "BARK!";
        }
    }
}
]]></code>
  </synonym>
  <synonym id="syn-use-a-library">
    <title>Use a library</title>
    <code language="csharp"><![CDATA[
// Just add a reference to the library when building.
var fido = new Animals.Dog();

// Expose the namespace if you want
using Animals;
var fido = new Dog();

// You can also use an alias
using Pets = Animals;
var fido = new Pets.Dog();
]]></code>
  </synonym>
</theme>
<theme id="theme-variables">
  <title>Variables</title>
  <synonym id="syn-create--assign-value">
    <title>Create + assign value</title>
    <code language="csharp"><![CDATA[
// C# variables can be explicitly typed...
string myName = "Aaron";

// or implicitly typed (for local variables)...
var myName = "Aaron";

// or untyped
dynamic myName = "Aaron";
]]></code>
  </synonym>
  <synonym id="syn-default-value">
    <title>Default value</title>
    <code language="csharp"><![CDATA[
string myName;
// == null

int x;
// == 0

int? x; // or Nullable<int> x;
// == null

dynamic d;
// == null

var implTyped;
// Compilation error: Must have an initializer
]]></code>
  </synonym>
  <synonym id="syn-hoisting">
    <title>Hoisting</title>
    <code language="csharp"><![CDATA[
// C# does not hoist variables.  The following
// method will issue a compile time error:  "Cannot use
// local variable name before it is declared".
void Hoisting()
{
    Console.WriteLine("Hello, {0}", name); // error
    var name = "Bob";
}
]]></code>
  </synonym>
  <synonym id="syn-final-variables">
    <title>Final variables</title>
    <code language="csharp"><![CDATA[
// C# allows this only for fields with the 'readonly' keyword. Fields can be initialized at the declaration or in the constructor.
public class Dog
{
    public readonly string Name = "Bob";
    public readonly int Age;

    public Dog(int age)
    {
        Age = age;
    }
}

// There's also "const", that can only be initialized at the declaration and is a compile-time constant.
const double gravitationalConstant = 6.673e-11;
]]></code>
  </synonym>
</theme>
<theme id="theme-collections">
  <title>Collections</title>
  <synonym id="syn-arrays--lists">
    <title>Arrays / Lists</title>
    <code language="csharp"><![CDATA[
// Arrays
var a = new int[5];
// a.Length == 5

// Generic lists
var b = new List<string>() { "apple", "banana" };
b.Add("orange");
// b.Count == 3
]]></code>
  </synonym>
  <synonym id="syn-custom-sort">
    <title>Custom sort</title>
    <code language="csharp"><![CDATA[
var numbers = new List<double>{ 42, 2.1, 5, 0.1, 391 };
numbers.Sort((a, b) => a.CompareTo(b));
// == [0.1, 2.1, 5, 42, 391];

// Or produce new LINQ sequence without modifying numbers
numbers.OrderBy(n => n);
]]></code>
  </synonym>
  <synonym id="syn-key-value-pairs">
    <title>Key-value pairs</title>
    <code language="csharp"><![CDATA[
// C# uses the Dictionary class.
var periodic = new Dictionary<string, string>();

// There's also the concurrent variant
var cc = new ConcurrentDictionary<string, string>();
]]></code>
  </synonym>
  <synonym id="syn-appropriate-keys">
    <title>Appropriate keys</title>
    <code language="csharp"><![CDATA[
// C# Dictionary supports keys and values of any Type.
var periodic = new Dictionary<string, string>() {
    { "gold", "AU" },
    { "silver", "AG" }
};

var favoriteIceCream = new Dictionary<object, dynamic>();
favoriteIceCream[new Kid("Billy")] = "vanilla";
]]></code>
  </synonym>
  <synonym id="syn-accessing-values">
    <title>Accessing values</title>
    <code language="csharp"><![CDATA[
// Accessing with a string key.
periodic["gold"] // == 'AU'
periodic["gold"] = "Glitter";

// Get or add
string s;
if (!periodic.TryGetValue("Xenon", out s))
    periodic.Add("Xenon", "XE");

// The concurrent variant has methods like this built-in
cc.TryAdd("Xenon", "XE"));            // true
cc.GetOrAdd("Xenon", (key) => "XE")); // "XE"
]]></code>
  </synonym>
  <synonym id="syn-sets-collections-of-unique-items">
    <title>Sets (collections of unique items)</title>
    <code language="csharp"><![CDATA[
var fruits = new HashSet<String>();
fruits.Add("Oranges");
fruits.Add("Apples");
Console.WriteLine("{0}", fruits.Count); // == 2

fruits.Add("Oranges");
Console.WriteLine("{0}", fruits.Count); // == 2
]]></code>
  </synonym>
  <synonym id="syn-queues-fifo">
    <title>Queues (FIFO)</title>
    <code language="csharp"><![CDATA[
var queue = new Queue<String>();
queue.Enqueue("event:32342");
queue.Enqueue("event:49309");

Console.WriteLine("{0}", queue.Count); // 2

var eventId = queue.Dequeue();

Console.WriteLine("{0}", eventId == "event:32342"); // true
Console.WriteLine("{0}", queue.Count); // 1
]]></code>
    <code language="csharp"><![CDATA[
// C# also supports FILO Stack
var stack = new Stack<String>();
stack.Push("event:32342");
stack.Push("event:49309");

Console.WriteLine({0}", stack.Count); // 2

var eventId = stack.Pop();

Console.WriteLine("{0}", eventId == "event:49309"); // true
Console.WriteLine("{0}", stack.Count); // 1
]]></code>
  </synonym>
</theme>
<theme id="theme-strings">
  <title>Strings</title>
  <synonym id="syn-raw-strings">
    <title>Raw strings</title>
    <code language="csharp"><![CDATA[
var rawString = @"The following is not expanded to a tab \t";

var escapedString = "The following is not expanded to a tab \\t";

rawString == escapedString // == true
]]></code>
  </synonym>
  <synonym id="syn-interpolation">
    <title>Interpolation</title>
    <code language="csharp"><![CDATA[
var name = "Aaron";
var greeting = $"My name is {name}.";

var greetingPolish = $"My Polish name would be {name}ski.";

var someProperty = $"{top + 20}px";
]]></code>
  </synonym>
  <synonym id="syn-concatenation">
    <title>Substring</title>
    <code language="csharp"><![CDATA[
// String concatenation with the '+' operator
var longMessage = "This is a very long line. "
                + "It is concatenated into one string.";
]]></code>
  </synonym>
  <synonym id="syn-substring">
    <title>Substring</title>
    <code language="csharp"><![CDATA[
"doghouses".Substring(3, 5); // == "house"
// The second argument is a length value.
]]></code>
  </synonym>
  <synonym id="syn-replace-all-occurences">
    <title>Replace all occurences</title>
    <code language="csharp"><![CDATA[
var doghouzez = "doghouses".Replace('s', 'z');
]]></code>
  </synonym>
  <synonym id="syn-replace-one-occurence">
    <title>Replace one occurence</title>
    <code language="csharp"><![CDATA[
var regex = new Regex("r");
var newText = regex.Replace("racecar", "sp", 1);
]]></code>
  </synonym>
  <synonym id="syn-multi-line-strings">
    <title>Multi-line strings</title>
    <code language="csharp"><![CDATA[
// C# allows multi-line literal strings.
// Both the first and last new-line are recognized.
var myString = @"
This is a string that spans
many lines.
";
]]></code>
  </synonym>
  <synonym id="syn-split-into-an-array">
    <title>Split into an array</title>
    <code language="csharp"><![CDATA[
var animals = "dogs, cats, gophers, zebras";
var individualAnimals = animals.Split(new []{", "}, StringSplitOptions.None);
// == ['dogs', 'cats', 'gophers', 'zebras']
]]></code>
  </synonym>
  <synonym id="syn-test-whether-a-string-starts-with-a-substring">
    <title>Test whether a string starts with a substring</title>
    <code language="csharp"><![CDATA[
"racecar".StartsWith("race"); // == true
"racecar".StartsWith("pace"); // == false
]]></code>
  </synonym>
</theme>
<theme id="theme-booleans">
  <title>Booleans</title>
  <synonym id="syn-if-statements">
    <title>If statements</title>
    <code language="csharp"><![CDATA[
var bugNumbers = new[] { 3234, 4542, 944, 124 };
if (bugNumbers.Length > 0)
{
    Console.WriteLine("Not ready for release.");
}
]]></code>
  </synonym>
  <synonym id="syn-ternary-statements">
    <title>Ternary statements</title>
    <code language="csharp"><![CDATA[
var bugNumbers = new[] { 3234, 4542, 944, 124 };
var status = bugNumbers.Length > 0 ? "RED" : "GREEN";

Console.WriteLine("The build is {0}", status);
]]></code>
  </synonym>
  <synonym id="syn-checking-for-empty-string">
    <title>Checking for empty string</title>
    <code language="csharp"><![CDATA[
var emptyString = "";

if (emptyString == string.Empty)
{
    Console.WriteLine("It's empty");
}
]]></code>
  </synonym>
  <synonym id="syn-checking-for-zero">
    <title>Checking for zero</title>
    <code language="csharp"><![CDATA[
var zero = 0;

if (zero == 0)
{
    Console.WriteLine("use == 0 to check zero");
}
]]></code>
  </synonym>
  <synonym id="syn-checking-for-null">
    <title>Checking for null</title>
    <code language="csharp"><![CDATA[
string myNull = null;

// For nullable types
if (myNull == null)
{
    Console.WriteLine("use == null to check null");
}

// In C# you can also check for the default value
if (myNull == default(MyClass))
{
    Console.WriteLine("It has the default value.");
}
]]></code>
  </synonym>
  <synonym id="syn-checking-for-nan">
    <title>Checking for NaN</title>
    <code language="csharp"><![CDATA[
var nan = double.NaN;

if (double.IsNaN(nan))
{
    Console.WriteLine("It's NaN.");
}
]]></code>
  </synonym>
  <synonym id="syn-checking-for-undefined">
    <title>Checking for undefined</title>
    <code language="csharp"><![CDATA[
// C# does not have a concept of undefined.
]]></code>
  </synonym>
  <synonym id="syn-value-and-identity-equality">
    <title>Value and identity equality</title>
    <code language="csharp"><![CDATA[
// C# handles equality differently for reference types
//   and for value types.

// Reference Types
// Use Equals() for logical equality.
// Operator == will default to reference equality unless the
//   class has overloaded it.
// Use Object.ReferenceEquals() to ensure reference equality
//   semantics.
var c1 = new MyClass(5);
var c2 = new MyClass(5);

c1.Equals(c2)                  // True
c1 == c2                       // True if == overridden
Object.ReferenceEquals(c1, c2) // False

c1 = c2;
Object.ReferenceEquals(c1, c2) // True

// Value Types
// Many types overload operator ==. If possible == is best
//   way to check logical equality.
// Can also use IEquatable<T>.Equals(T), but avoid
//   Object.Equals(Object) for performace.
// DON'T use Object.ReferenceEquals, because boxed values
//   will never be equal.
var v1 = 5;
var v2 = 5;

v1 == v2                       // True
v1.Equals(v2)                  // True
Object.ReferenceEquals(v1, v2) // False!!!

// Operator == is static and can be overloaded.
// Object.Equals() is virtual and can be overridden.
// IEquatable<T>.Equals() avoid boxing value types, and
//   indicates type supports equality.
]]></code>
  </synonym>
</theme>
<theme id="theme-functions">
  <title>Functions</title>
  <synonym id="syn-function-definition">
    <title>Function definition</title>
    <code language="csharp"><![CDATA[
// Return type of methods must be specified in C#, or void if no return.
bool Method()
{
    return True;
}

void VoidMethod()
{
    // no return
}
]]></code>
  </synonym>
  <synonym id="syn-return-value">
    <title>Return value</title>
    <code language="csharp"><![CDATA[
// Return Type must match method signature
bool IsTrue()
{
    return "hi"; // error
}

MyClass MakeMyClass()
{
    return new MyClass(); // correct.
}

// void methods in C# do not return a value.
void DoNothing() {}
]]></code>
  </synonym>
  <synonym id="syn-assign-a-function-to-a-variable">
    <title>Assign a function to a variable</title>
    <code language="csharp"><![CDATA[
// Use of 'var' not allowed in this case.
// The variable must be explicitly-typed.
Func<string, string> loudify = (msg) => msg.ToUpper();

loudify("not gonna take it anymore"); // NOT GONNA TAKE IT ANYMORE 
]]></code>
  </synonym>
  <synonym id="syn-optional-parameters">
    <title>Optional parameters</title>
    <code language="csharp"><![CDATA[
// b and c are optional by assigning a default value
int Fn(int a, int b = 0, string c = "Hello")
{
    return b; // == 0
}

// optional arguments must be called in order if not named.
Fn(0, 5, "foo");

// or use named arguements, to skip some optional arguments.
Fn(0, c: "bar");
]]></code>
  </synonym>
  <synonym id="syn-default-parameters">
    <title>Default parameters</title>
    <code language="csharp"><![CDATA[
string Send(string msg, string rate = "First Class")
{
    return string.Format("{0} was sent via {1}", msg, rate);
}

Send("hello"); // == "hello was sent via First Class"
Send("I'm cheap", "4th class"); // == "I'm cheap was sent via 4th class"
]]></code>
  </synonym>
  <synonym id="syn-named-parameters">
    <title>Named parameters</title>
    <code language="csharp"><![CDATA[
string Send(string msg, string rate = "First Class")
{
    return string.Format("{0} was sent via {1}", msg, rate);
}

// you can use named parameters for all arguments
Send(msg: "I'm cheap", rate: "4th class"); // == "I'm cheap was sent via 4th class"
]]></code>
  </synonym>
  <synonym id="syn-variable-number-of-arguments">
    <title>Variable number of arguments</title>
    <code language="csharp"><![CDATA[
// Supports a params[] argument to take an arbitrary array of additional arguments.
void WithParams(int a, params object[] extra)
{
    for (int i = 0; i < extra.Length; i++)
    {
        Console.WriteLine("There's no stopping {0}", extra[i]);
    }
}

WithParams(5, "hi", -4, "you", true);
]]></code>
  </synonym>
</theme>
<theme id="theme-iterators">
  <title>Iterators</title>
  <synonym id="syn-for-loops-for-lists">
    <title>For loops for lists</title>
    <code language="csharp"><![CDATA[
var colors = new List<string> { "red", "orange", "green" };

for (var i = 0; i < colors.Count; i++)
{
    Console.WriteLine(colors[i]);
}
]]></code>
  </synonym>
  <synonym id="syn-for-in-loops">
    <title>For-in loops</title>
    <code language="csharp"><![CDATA[
var colors = new List<string> { "red", "orange", "green" };

// C# uses the 'foreach' keyword for this kind of iteration.
foreach (var color in colors)
{
    Console.WriteLine(color);
}
]]></code>
  </synonym>
  <synonym id="syn-for-loops-for-objectsmaps">
    <title>For loops for objects/maps</title>
    <code language="csharp"><![CDATA[
var data = new Dictionary<string, string>() { … };

foreach (var key in data.Keys)
{
    Console.WriteLine("{0}, {1}", key, data[key]);
}

// Alternatively, you can iterate the dictionary itself with KeyValuePair instances.
foreach (var kvp in data)
{
    Console.WriteLine("{0}, {1}", kvp.Key, kvp.Value);
}

// C# allows iteration via Linq extension methods too
data.ToList()
    .ForEach(o => Console.WriteLine(string.Format("{0}, {1}", o.Key, o.Value)));
]]></code>
  </synonym>
  <synonym id="syn-closures-and-counters-in-loops">
    <title>Closures and counters in loops</title>
    <code language="csharp"><![CDATA[
// C# reuses for loop variables, so capture a local variable
var callbacks = new List<Action>();
for (var i = 0; i < 2; i++)
{
    int captured = i;
    callbacks.Add(() => Console.WriteLine("i:{0} capt:{1}",
        i, captured));
}

callbacks[0](); // i:2 capt:0
callbacks[1](); // i:2 capt:1

// Avoid closing over foreach loop variable, because C# 5
// introduced a breaking change. Previously the foreach loop
// variable was reused, but now it is "fresh" for each loop.
]]></code>
  </synonym>
</theme>
<theme id="theme-classes">
  <title>Classes</title>
  <synonym id="syn-define">
    <title>Define</title>
    <code language="csharp"><![CDATA[
class Person
{
    string name;
  
    public string Greet()
    {
        return string.Format("Hello, {0}", name);
    }
}
]]></code>
  </synonym>
  <synonym id="syn-constructor-with-parameter">
    <title>Constructor with parameter</title>
    <code language="csharp"><![CDATA[
class Person
{
    string name;
  
    public Person(string name)
    {
        this.name = name;
    }
}
]]></code>
  </synonym>
  <synonym id="syn-instantiate">
    <title>Instantiate</title>
    <code language="csharp"><![CDATA[
var person = new Person();
]]></code>
  </synonym>
  <synonym id="syn-reflection">
    <title>Reflection</title>
    <code language="csharp"><![CDATA[
var name = "Bob";
test.GetType() // == System.String
]]></code>
  </synonym>
  <synonym id="syn-check-the-type">
    <title>Check the type</title>
    <code language="csharp"><![CDATA[
var name = "Bob";

test is string // == true

!(test is int) // == true
]]></code>
  </synonym>
  <synonym id="syn-subclass">
    <title>Subclass</title>
    <code language="csharp"><![CDATA[
class Person
{
    string name;
  
    public Person(string name) { this.name = name; }
  
    public string Greet()
    {
        return String.Format("Hello, {0}", name);
    }
}

class Employee : Person
{
    double salary;
    // C# also has the decimal type for greater precision
  
    public Employee(string name, double salary)
        : base(name)
    {
        this.salary = salary;
    }
  
    public void GrantRaise(double percent)
    {
        salary += salary * percent;
    }
}
]]></code>
  </synonym>
  <synonym id="syn-operator-overloading">
    <title>Operator &quot;overloading&quot;</title>
    <code language="csharp"><![CDATA[
public struct Point
{
    public readonly int x;
    public readonly int y;

    public Point(int x, int y)
    {
        this.x = x;
        this.y = y;
    }

    public static Point operator+(Point p1, Point p2)
    {
        return new Point(p1.x + p2.x, p1.y + p2.y);
    }

    public override string ToString()
    {
        return String.Format("x:{0}, y:{1}", x, y);
    }
}

public void OperatorOverload()
{
    var p1 = new Point(1, 1);
    var p2 = new Point(2, 2);
    var p3 = p1 + p2;
    Console.WriteLine(p3);
}
]]></code>
  </synonym>
</theme>
<theme id="theme-finding-elements-in-dom">
  <title>Finding elements in DOM</title>
  <synonym id="syn-find-one-element-by-id">
    <title>Find one element by id</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
document.getElementById("main");

document.querySelector("#main");
]]></code>
  </synonym>
  <synonym id="syn-find-one-element-by-class">
    <title>Find one element by class</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
document.querySelector(".visible");
]]></code>
  </synonym>
  <synonym id="syn-find-many-elements-by-class">
    <title>Find many elements by class</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
document.querySelectorAll(".visible");
]]></code>
  </synonym>
  <synonym id="syn-find-one-element-by-tag">
    <title>Find one element by tag</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
document.querySelector("div");
]]></code>
  </synonym>
  <synonym id="syn-find-many-elements-by-tag">
    <title>Find many elements by tag</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
document.querySelectorAll("div");
]]></code>
  </synonym>
  <synonym id="syn-find-one-element-by-name">
    <title>Find one element by name</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
document.querySelector("form");
]]></code>
  </synonym>
  <synonym id="syn-find-many-elements-by-name">
    <title>Find many elements by name</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
document.querySelectorAll("form");
]]></code>
  </synonym>
  <synonym id="syn-find-elements-by-combination-of-above">
    <title>Find elements by combination of above</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
document.querySelectorAll("#main div:first-of-type .visible");
]]></code>
  </synonym>
  <synonym id="syn-iterate-over-a-list-of-elements">
    <title>Iterate over a list of elements</title>
    <code language="csharp"><![CDATA[
foreach(dynamic el in els)
{
  DoSomethingWithEl(el);
}
]]></code>
  </synonym>
  <synonym id="syn-access-the-first-child">
    <title>Access the first child</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
var element = document.querySelector("#main") as HtmlElement;
var result = element.Children[0];
]]></code>
  </synonym>
  <synonym id="syn-find-out-whether-an-element-has-children-elements">
    <title>Find out whether an element has children elements</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
var element = document.querySelector("#main") as HtmlElement;
var result = element.Children.Any();
]]></code>
  </synonym>
</theme>
<theme id="theme-manipulating-dom">
  <title>Manipulating DOM</title>
  <synonym id="syn-create-an-element">
    <title>Create an element</title>
    <code language="csharp"><![CDATA[
var document = HtmlPage.Document;
var newElement = document.CreateElement("div");
]]></code>
  </synonym>
  <synonym id="syn-create-an-element-and-set-its-contents">
    <title>Create an element and set its contents</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
dynamic newElement = document.CreateElement("div");
newElement.innerHTML = "A quick brown <em>fox</em>.";
]]></code>
  </synonym>
  <synonym id="syn-add-an-element-to-a-parent">
    <title>Add an element to a parent</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
dynamic parentElement = document.CreateElement("div");
dynamic childElement = document.CreateElement("div");
parentElement.appendChild(childElement);
]]></code>
  </synonym>
  <synonym id="syn-remove-an-element-from-its-parent">
    <title>Remove an element from its parent</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
dynamic parentElement = document.CreateElement("div");
dynamic childElement = document.CreateElement("div");
parentElement.appendChild(childElement);
parentElement.removeChild(childElement);
]]></code>
  </synonym>
</theme>
<theme id="theme-regular-expressions">
  <title>Regular expressions</title>
  <synonym>
    <code language="csharp"><![CDATA[
var email = "test@example.com";
Regex.Match(email, "@"); // == Match Object
]]></code>
  </synonym>
  <synonym>
    <code language="csharp"><![CDATA[
var invalidEmail = "f@il@example.com";
Regex.Matches("f@il@example.com", "@")
// == Iterable MatchCollection

// or, after creating a Regex instance
new Regex("@").Matches(invalidEmail);
]]></code>
  </synonym>
</theme>
<theme id="theme-exceptions">
  <title>Exceptions</title>
  <synonym id="syn-throw-an-exception">
    <title>Throw an exception</title>
    <code language="csharp"><![CDATA[
throw new Exception("Intruder Alert!!");

// The type thrown must be derived from System.Exception
]]></code>
  </synonym>
  <synonym id="syn-catch-an-exception">
    <title>Catch an exception</title>
    <code language="csharp"><![CDATA[
try {
    int.Parse("three");
}
catch (FormatException fe) {
    Console.WriteLine("Ouch! Detected: {0}", fe);
}
catch (Exception e) {
    Console.WriteLine("If some other type of exception");
} finally {
    Console.WriteLine("This runs even if an exception is thrown");
}
]]></code>
  </synonym>
</theme>
<theme id="theme-event-handling">
  <title>Event handling</title>
  <synonym id="syn-attach-an-event-handler">
    <title>Attach an event handler</title>
    <code language="csharp"><![CDATA[
// For DOM events in Silverlight:
dynamic document = HtmlPage.Document;
document.addEventListener("click", handleOnClick, false);

// For general-purpose events:

// Declare event (at class level)
public event EventHandler<EventArgs> myEvent;

void Events()
{
    // subscribe to event
    myEvent += (Object sender, EventArgs args) => {
        Console.WriteLine("My event fired!");
    };

    // fire the event
    myEvent(this, new EventArgs());
}

]]></code>
  </synonym>
  <synonym id="syn-remove-an-event-handler">
    <title>Remove an event handler</title>
    <code language="csharp"><![CDATA[
dynamic document = HtmlPage.Document;
document.removeEventListener("click", handleOnClick, false);

// For general-purpose events:
myEvent -= Click;
]]></code>
  </synonym>
</theme>
<theme id="theme-timing">
  <title>Timing</title>
  <synonym id="syn-schedule-a-future-event">
    <title>Schedule a future event</title>
    <code language="csharp"><![CDATA[
// There are many ways to do this in C#.  This is one simple example:
new Timer(state => Console.WriteLine("Timer Fired!"), null, 500, 0);
]]></code>
  </synonym>
  <synonym id="syn-measure-the-execution-time-of-a-function">
    <title>Measure the execution time of a function</title>
    <code language="csharp"><![CDATA[
var sw = Stopwatch.StartNew();
Thread.Sleep(1000);
sw.Stop();
Console.WriteLine("Ellapsed Time: {0}", sw.Elapsed);
]]></code>
  </synonym>
</theme>
<theme id="theme-html-attributes">
  <title>HTML attributes</title>
  <synonym id="syn-get-html-attribute">
    <title>Get HTML attribute</title>
    <code language="csharp"><![CDATA[
// In Silverlight.  Using C# dynamic type.
element.getAttribute("href");
]]></code>
  </synonym>
  <synonym id="syn-set-html-attribute">
    <title>Set HTML attribute</title>
    <code language="csharp"><![CDATA[
// In Silverlight.  Using C# dynamic type.
element.setAttribute("playable", true);
]]></code>
  </synonym>
  <synonym id="syn-remove-html-attribute">
    <title>Remove HTML attribute</title>
    <code language="csharp"><![CDATA[
// In Silverlight.  Using C# dynamic type.
element.removeAttribute("playable");
]]></code>
  </synonym>
  <synonym id="syn-check-if-html-attribute-exists">
    <title>Check if HTML attribute exists</title>
    <code language="csharp"><![CDATA[
// In Silverlight.  Using C# dynamic type.
element.hasAttribute("href");
]]></code>
  </synonym>
</theme>
<theme id="theme-css-classes">
  <title>CSS classes</title>
  <synonym id="syn-add-css-class">
    <title>Add CSS class</title>
    <code language="csharp"><![CDATA[
// In Silverlight.  Using C# dynamic type.
element.CssClass += " new-class";
]]></code>
  </synonym>
  <synonym id="syn-remove-css-class">
    <title>Remove CSS class</title>
    <code language="csharp"><![CDATA[
// In Silverlight.  Using C# dynamic type.
element.CssClass = element.CssClass.Replace("new-class", "");
]]></code>
  </synonym>
</theme>
<theme id="theme-ajax">
  <title>Ajax</title>
  <synonym id="syn-request-data-via-xmlhttprequest">
    <title>Request data via XMLHttpRequest</title>
    <code language="csharp"><![CDATA[
// In Silverlight...
var wc = new WebClient();

wc.DownloadStringCompleted += (object sender, DownloadStringCompletedEventArgs e) => {
    if (e.Error == null)
    {
        MessageBox.Show(e.Result);
    }
    else
    {
        // handle...
    }
};

wc.DownloadStringAsync(new Uri("/data.json", UriKind.Relative));
]]></code>
  </synonym>
</theme>
<theme id="theme-jquery">
  <title>jQuery</title>
  <synonym id="syn-react-to-document-finishing-loading">
    <title>React to document finishing loading</title>
    <code language="csharp"><![CDATA[
// C# Apps running in Silverlight may access jQuery via the DOM bridge API.
]]></code>
  </synonym>
  <synonym id="syn-node-lookup">
    <title>Node lookup</title>
    <code language="csharp"><![CDATA[
// C# Apps running in Silverlight may access jQuery via the DOM bridge API.
]]></code>
  </synonym>
  <synonym id="syn-node-creation">
    <title>Node creation</title>
    <code language="csharp"><![CDATA[
// C# Apps running in Silverlight may access jQuery via the DOM bridge API.
]]></code>
  </synonym>
  <synonym id="syn-event-handling">
    <title>Event handling</title>
    <code language="csharp"><![CDATA[
// C# Apps running in Silverlight may access jQuery via the DOM bridge API.
]]></code>
  </synonym>
  <synonym id="syn-relative-nodes">
    <title>Relative nodes</title>
    <code language="csharp"><![CDATA[
// C# Apps running in Silverlight may access jQuery via the DOM bridge API.
]]></code>
  </synonym>
  <synonym id="syn-children">
    <title>Children</title>
    <code language="csharp"><![CDATA[
// C# Apps running in Silverlight may access jQuery via the DOM bridge API.
]]></code>
  </synonym>
  <synonym id="syn-clone">
    <title>Clone</title>
    <code language="csharp"><![CDATA[
// C# Apps running in Silverlight may access jQuery via the DOM bridge API.
]]></code>
  </synonym>
</theme>
<theme id="theme-math">
  <title>Math</title>
  <synonym id="syn-absolute-value">
    <title>Absolute value</title>
    <code language="csharp"><![CDATA[
Math.Abs(-4); // == 4
]]></code>
  </synonym>
  <synonym id="syn-ceiling">
    <title>Ceiling</title>
    <code language="csharp"><![CDATA[
Math.Ceiling(4.89); // == 5
]]></code>
  </synonym>
  <synonym id="syn-floor">
    <title>Floor</title>
    <code language="csharp"><![CDATA[
Math.Floor(4.89); // == 4
]]></code>
  </synonym>
  <synonym id="syn-random">
    <title>Random</title>
    <code language="csharp"><![CDATA[
var rand = new Random();

// Returns a random double greater than or equal to 0.0
// and less than 1.0
rand.NextDouble();

// Returns a positive random integer greater or equal
// to 0 and less than 10
rand.Next(10);
rand.Next(50, 100); // between 50 and 100

// fill array with pseudo-random bytes
rand.NextBytes(buffer);

// Note: There's also RNGCryptoServiceProvider
// for stronger pseudo-random numbers
]]></code>
  </synonym>
  <synonym id="syn-sine-and-cosine">
    <title>Sine and Cosine</title>
    <code language="csharp"><![CDATA[
Math.Sin(Math.PI / 2); // == 1
Math.Cos(Math.PI); // == -1
]]></code>
  </synonym>
  <synonym id="syn-convert-a-string-to-a-number">
    <title>Convert a String to a number</title>
    <code language="csharp"><![CDATA[
int.Parse("3"); // == 3
double.Parse("3.14"); // == 3.14

int.Parse("three"); // ERROR: throws FormatException

// Parse different representations
int.Parse("AF", NumberStyles.HexNumber);

// and cultures
double.Parse("3.14", CultureInfo.InvariantCulture);
double.Parse("3,14", CultureInfo.GetCultureInfo("el-GR"));

// Without exceptions
int value;
if (int.TryParse("three", out value))
    Console.WriteLine("OK, it is: {0}", value);
else
    Console.WriteLine("Can't be parsed");
]]></code>
  </synonym>
</theme>
<theme id="theme-run-time-program-manipulation">
  <title>Run time program manipulation</title>
  <synonym id="syn-eval">
    <title>Eval</title>
    <code language="csharp"><![CDATA[
// via .net reflection API (restrictions in Silverlight)
// Not specific to C#
]]></code>
  </synonym>
  <synonym id="syn-adding-a-method-to-a-class">
    <title>Adding a method to a class</title>
    <code language="csharp"><![CDATA[
// via .net reflection API (restrictions in Silverlight)
// Not specific to C#
]]></code>
  </synonym>
</theme>
</synonyms>
