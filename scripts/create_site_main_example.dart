import 'dart:io';
import 'dart:convert' show HtmlEscape, HtmlEscapeMode;
import 'package:html_unescape/html_unescape.dart';
import 'package:logging/logging.dart';

final Logger _log = new Logger('');

final warning = '''{%- comment %}
WARNING: Do NOT EDIT this file directly. It is autogenerated by
  ${Platform.script.path.replaceFirst(new RegExp(r'^.*site-www/'), '')}
from sources in the example folder.
{% endcomment -%}
''';

void main() {
  // Logger.root.level = Level.ALL;
  Logger.root.onRecord.listen((LogRecord rec) => print('>> ${rec.message}'));

  final mainExampleSrcAsHtmlWithTips = new Main().getSrcHtmlWithTips();

  final html = [
    warning,
    '<pre class="prettyprint">\n',
    mainExampleSrcAsHtmlWithTips.join('\n'),
    '</pre>\n'
  ].join('');
  new File('../src/_main-example.html').writeAsStringSync(html);
}

class Main {
  final HtmlEscape _htmlEscape =
      new HtmlEscape(new HtmlEscapeMode(escapeLtGt: true));
  final HtmlUnescape _htmlUnescape = new HtmlUnescape();
  final tipRegExp = new RegExp(r'^(.*?) //!tip\("([^"]+)"\)$');
  final tooltips = _getTooltips();

  int indexOfNextTooltip = 0;

  Iterable<String> getSrcHtmlWithTips() =>
      getMainExampleSrcLines().map(processTipInstruction);

  /// Side-effect: increments [indexOfNextTooltip] as it processes tips.
  String processTipInstruction(String line) {
    _log.fine(line);
    line = htmlEscape(line);

    while (line.contains('//!tip(')) {
      var match = tipRegExp.firstMatch(line);
      if (match == null) throw 'Tip instruction match failed for line: $line';
      final lineWithoutTipInstruction = match[1],
          anchor = _htmlUnescape.convert(match[2]),
          tooltip = tooltips[indexOfNextTooltip],
          tooltipAnchor = tooltip[0],
          tooltipText = tooltip[1];
      indexOfNextTooltip += 1;
      if (tooltipAnchor != anchor)
        throw 'Expected tip for $anchor, but instead found tip for ${tooltip[0]}. Aborting.';
      final escapedAnchor = htmlEscape(anchor);
      _log.fine('  ** Replacing "$escapedAnchor" with span');
      line = lineWithoutTipInstruction.replaceFirst(escapedAnchor,
          '<span class="frontpage-highlight" data-text="$tooltipText">$escapedAnchor</span>');
    }
    return line;
  }

  String htmlEscape(String s) => _htmlEscape.convert(s);
}

Iterable<String> getMainExampleSrcLines() {
  final _mainExampleFile = '../examples/lib/pi_monte_carlo.dart';
  return new File(_mainExampleFile)
      .readAsLinesSync()
      .skipWhile((line) => !line.startsWith('import')) // initial comment block
      .where((line) => !line.contains('web-only'))
      .map((line) => line.replaceFirst('numIterations', '500'));
}

List<List<String>> _getTooltips() {
  final _tooltipFile = '../examples/lib/pi_monte_carlo_tooltips.html';
  final _tooltipLineRE = new RegExp(r'^\s*<li name="(.*?)">(.*)</li>');

  // Read tooltips.
  return new File(_tooltipFile)
      .readAsLinesSync()
      .where((line) => line.contains('<li'))
      .map((line) {
    final match = _tooltipLineRE.firstMatch(line);

    return [
      match[1], // anchor text, e.g. "import"
      match[2], // tooltip HTML
    ];
  }).toList();
}
